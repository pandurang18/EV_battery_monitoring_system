
Vtg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003538  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080036c8  080036c8  000046c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003720  08003720  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003720  08003720  00004720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003728  08003728  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003728  08003728  00004728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800372c  0800372c  0000472c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003730  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000505c  2**0
                  CONTENTS
 10 .bss          00000220  2000005c  2000005c  0000505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000027c  2000027c  0000505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000823c  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000178c  00000000  00000000  0000d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  0000ea58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000062f  00000000  00000000  0000f270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021751  00000000  00000000  0000f89f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a816  00000000  00000000  00030ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf1c9  00000000  00000000  0003b806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a9cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025ac  00000000  00000000  0010aa14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  0010cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080036b0 	.word	0x080036b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080036b0 	.word	0x080036b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af02      	add	r7, sp, #8
 8000566:	4603      	mov	r3, r0
 8000568:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	f023 030f 	bic.w	r3, r3, #15
 8000570:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000578:	7bfb      	ldrb	r3, [r7, #15]
 800057a:	f043 030c 	orr.w	r3, r3, #12
 800057e:	b2db      	uxtb	r3, r3
 8000580:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	b2db      	uxtb	r3, r3
 800058a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800058c:	7bbb      	ldrb	r3, [r7, #14]
 800058e:	f043 030c 	orr.w	r3, r3, #12
 8000592:	b2db      	uxtb	r3, r3
 8000594:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000596:	7bbb      	ldrb	r3, [r7, #14]
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	b2db      	uxtb	r3, r3
 800059e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005a0:	f107 0208 	add.w	r2, r7, #8
 80005a4:	2364      	movs	r3, #100	@ 0x64
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2304      	movs	r3, #4
 80005aa:	214e      	movs	r1, #78	@ 0x4e
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <lcd_send_cmd+0x5c>)
 80005ae:	f001 fc01 	bl	8001db4 <HAL_I2C_Master_Transmit>
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	200000c0 	.word	0x200000c0

080005c0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	f023 030f 	bic.w	r3, r3, #15
 80005d0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005d2:	79fb      	ldrb	r3, [r7, #7]
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	f043 030d 	orr.w	r3, r3, #13
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	f043 0309 	orr.w	r3, r3, #9
 80005e8:	b2db      	uxtb	r3, r3
 80005ea:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 80005ec:	7bbb      	ldrb	r3, [r7, #14]
 80005ee:	f043 030d 	orr.w	r3, r3, #13
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 80005f6:	7bbb      	ldrb	r3, [r7, #14]
 80005f8:	f043 0309 	orr.w	r3, r3, #9
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000600:	f107 0208 	add.w	r2, r7, #8
 8000604:	2364      	movs	r3, #100	@ 0x64
 8000606:	9300      	str	r3, [sp, #0]
 8000608:	2304      	movs	r3, #4
 800060a:	214e      	movs	r1, #78	@ 0x4e
 800060c:	4803      	ldr	r0, [pc, #12]	@ (800061c <lcd_send_data+0x5c>)
 800060e:	f001 fbd1 	bl	8001db4 <HAL_I2C_Master_Transmit>
}
 8000612:	bf00      	nop
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000c0 	.word	0x200000c0

08000620 <lcd_clear>:

void lcd_clear (void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x00);
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff ff9a 	bl	8000560 <lcd_send_cmd>
	for (int i=0; i<100; i++)
 800062c:	2300      	movs	r3, #0
 800062e:	607b      	str	r3, [r7, #4]
 8000630:	e005      	b.n	800063e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000632:	2020      	movs	r0, #32
 8000634:	f7ff ffc4 	bl	80005c0 <lcd_send_data>
	for (int i=0; i<100; i++)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	3301      	adds	r3, #1
 800063c:	607b      	str	r3, [r7, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b63      	cmp	r3, #99	@ 0x63
 8000642:	ddf6      	ble.n	8000632 <lcd_clear+0x12>
	}
}
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <lcd_init>:

void lcd_init (void)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000652:	2032      	movs	r0, #50	@ 0x32
 8000654:	f000 fbaa 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x30);
 8000658:	2030      	movs	r0, #48	@ 0x30
 800065a:	f7ff ff81 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800065e:	2005      	movs	r0, #5
 8000660:	f000 fba4 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x30);
 8000664:	2030      	movs	r0, #48	@ 0x30
 8000666:	f7ff ff7b 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800066a:	2001      	movs	r0, #1
 800066c:	f000 fb9e 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x30);
 8000670:	2030      	movs	r0, #48	@ 0x30
 8000672:	f7ff ff75 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(10);
 8000676:	200a      	movs	r0, #10
 8000678:	f000 fb98 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800067c:	2020      	movs	r0, #32
 800067e:	f7ff ff6f 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(10);
 8000682:	200a      	movs	r0, #10
 8000684:	f000 fb92 	bl	8000dac <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000688:	2028      	movs	r0, #40	@ 0x28
 800068a:	f7ff ff69 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);
 800068e:	2001      	movs	r0, #1
 8000690:	f000 fb8c 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000694:	2008      	movs	r0, #8
 8000696:	f7ff ff63 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);
 800069a:	2001      	movs	r0, #1
 800069c:	f000 fb86 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006a0:	2001      	movs	r0, #1
 80006a2:	f7ff ff5d 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);
 80006a6:	2001      	movs	r0, #1
 80006a8:	f000 fb80 	bl	8000dac <HAL_Delay>
	HAL_Delay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 fb7d 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006b2:	2006      	movs	r0, #6
 80006b4:	f7ff ff54 	bl	8000560 <lcd_send_cmd>
	HAL_Delay(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f000 fb77 	bl	8000dac <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006be:	200c      	movs	r0, #12
 80006c0:	f7ff ff4e 	bl	8000560 <lcd_send_cmd>
}
 80006c4:	bf00      	nop
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80006d0:	e006      	b.n	80006e0 <lcd_send_string+0x18>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	1c5a      	adds	r2, r3, #1
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff70 	bl	80005c0 <lcd_send_data>
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d1f4      	bne.n	80006d2 <lcd_send_string+0xa>
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fae6 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f83e 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f000 f926 	bl	8000950 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000704:	f000 f8a4 	bl	8000850 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000708:	f000 f8f4 	bl	80008f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
lcd_init();
 800070c:	f7ff ff9f 	bl	800064e <lcd_init>
lcd_clear();
 8000710:	f7ff ff86 	bl	8000620 <lcd_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 8000714:	4815      	ldr	r0, [pc, #84]	@ (800076c <main+0x78>)
 8000716:	f000 fbb1 	bl	8000e7c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800071a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800071e:	4813      	ldr	r0, [pc, #76]	@ (800076c <main+0x78>)
 8000720:	f000 fcb1 	bl	8001086 <HAL_ADC_PollForConversion>
	  vtg = HAL_ADC_GetValue(&hadc1);
 8000724:	4811      	ldr	r0, [pc, #68]	@ (800076c <main+0x78>)
 8000726:	f000 fd39 	bl	800119c <HAL_ADC_GetValue>
 800072a:	4603      	mov	r3, r0
 800072c:	4a10      	ldr	r2, [pc, #64]	@ (8000770 <main+0x7c>)
 800072e:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000730:	480e      	ldr	r0, [pc, #56]	@ (800076c <main+0x78>)
 8000732:	f000 fc75 	bl	8001020 <HAL_ADC_Stop>
	  vtg = (vtg * 5)/1024;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <main+0x7c>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	4613      	mov	r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4413      	add	r3, r2
 8000740:	0a9b      	lsrs	r3, r3, #10
 8000742:	4a0b      	ldr	r2, [pc, #44]	@ (8000770 <main+0x7c>)
 8000744:	6013      	str	r3, [r2, #0]
	  sprintf(str,"Voltage:%d",vtg);
 8000746:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <main+0x7c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	461a      	mov	r2, r3
 800074c:	4909      	ldr	r1, [pc, #36]	@ (8000774 <main+0x80>)
 800074e:	480a      	ldr	r0, [pc, #40]	@ (8000778 <main+0x84>)
 8000750:	f002 fb0e 	bl	8002d70 <siprintf>
	  lcd_send_cmd(0x80|0x00);
 8000754:	2080      	movs	r0, #128	@ 0x80
 8000756:	f7ff ff03 	bl	8000560 <lcd_send_cmd>
	  lcd_send_string(str);
 800075a:	4807      	ldr	r0, [pc, #28]	@ (8000778 <main+0x84>)
 800075c:	f7ff ffb4 	bl	80006c8 <lcd_send_string>
	  HAL_Delay(500);
 8000760:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000764:	f000 fb22 	bl	8000dac <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000768:	bf00      	nop
 800076a:	e7d3      	b.n	8000714 <main+0x20>
 800076c:	20000078 	.word	0x20000078
 8000770:	20000114 	.word	0x20000114
 8000774:	080036c8 	.word	0x080036c8
 8000778:	20000118 	.word	0x20000118

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	@ 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	@ 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f002 fb10 	bl	8002db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a8:	4a27      	ldr	r2, [pc, #156]	@ (8000848 <SystemClock_Config+0xcc>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b0:	4b25      	ldr	r3, [pc, #148]	@ (8000848 <SystemClock_Config+0xcc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b22      	ldr	r3, [pc, #136]	@ (800084c <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a21      	ldr	r2, [pc, #132]	@ (800084c <SystemClock_Config+0xd0>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <SystemClock_Config+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d8:	2301      	movs	r3, #1
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007ec:	2304      	movs	r3, #4
 80007ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007f0:	2348      	movs	r3, #72	@ 0x48
 80007f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007f8:	2307      	movs	r3, #7
 80007fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	4618      	mov	r0, r3
 8000802:	f001 fe31 	bl	8002468 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800080c:	f000 f900 	bl	8000a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000814:	2302      	movs	r3, #2
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000820:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000822:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000826:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2102      	movs	r1, #2
 800082e:	4618      	mov	r0, r3
 8000830:	f002 f892 	bl	8002958 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800083a:	f000 f8e9 	bl	8000a10 <Error_Handler>
  }
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	@ 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000856:	463b      	mov	r3, r7
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000862:	4b21      	ldr	r3, [pc, #132]	@ (80008e8 <MX_ADC1_Init+0x98>)
 8000864:	4a21      	ldr	r2, [pc, #132]	@ (80008ec <MX_ADC1_Init+0x9c>)
 8000866:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000868:	4b1f      	ldr	r3, [pc, #124]	@ (80008e8 <MX_ADC1_Init+0x98>)
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800086e:	4b1e      	ldr	r3, [pc, #120]	@ (80008e8 <MX_ADC1_Init+0x98>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000874:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <MX_ADC1_Init+0x98>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800087a:	4b1b      	ldr	r3, [pc, #108]	@ (80008e8 <MX_ADC1_Init+0x98>)
 800087c:	2200      	movs	r2, #0
 800087e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000880:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <MX_ADC1_Init+0x98>)
 8000882:	2200      	movs	r2, #0
 8000884:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <MX_ADC1_Init+0x98>)
 800088a:	2200      	movs	r2, #0
 800088c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800088e:	4b16      	ldr	r3, [pc, #88]	@ (80008e8 <MX_ADC1_Init+0x98>)
 8000890:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <MX_ADC1_Init+0xa0>)
 8000892:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000894:	4b14      	ldr	r3, [pc, #80]	@ (80008e8 <MX_ADC1_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <MX_ADC1_Init+0x98>)
 800089c:	2201      	movs	r2, #1
 800089e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_ADC1_Init+0x98>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	@ (80008e8 <MX_ADC1_Init+0x98>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008ae:	480e      	ldr	r0, [pc, #56]	@ (80008e8 <MX_ADC1_Init+0x98>)
 80008b0:	f000 faa0 	bl	8000df4 <HAL_ADC_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 f8a9 	bl	8000a10 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008c2:	2301      	movs	r3, #1
 80008c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ca:	463b      	mov	r3, r7
 80008cc:	4619      	mov	r1, r3
 80008ce:	4806      	ldr	r0, [pc, #24]	@ (80008e8 <MX_ADC1_Init+0x98>)
 80008d0:	f000 fc72 	bl	80011b8 <HAL_ADC_ConfigChannel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008da:	f000 f899 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000078 	.word	0x20000078
 80008ec:	40012000 	.word	0x40012000
 80008f0:	0f000001 	.word	0x0f000001

080008f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008f8:	4b12      	ldr	r3, [pc, #72]	@ (8000944 <MX_I2C1_Init+0x50>)
 80008fa:	4a13      	ldr	r2, [pc, #76]	@ (8000948 <MX_I2C1_Init+0x54>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008fe:	4b11      	ldr	r3, [pc, #68]	@ (8000944 <MX_I2C1_Init+0x50>)
 8000900:	4a12      	ldr	r2, [pc, #72]	@ (800094c <MX_I2C1_Init+0x58>)
 8000902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000904:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <MX_I2C1_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800090a:	4b0e      	ldr	r3, [pc, #56]	@ (8000944 <MX_I2C1_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000910:	4b0c      	ldr	r3, [pc, #48]	@ (8000944 <MX_I2C1_Init+0x50>)
 8000912:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000916:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b0a      	ldr	r3, [pc, #40]	@ (8000944 <MX_I2C1_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800091e:	4b09      	ldr	r3, [pc, #36]	@ (8000944 <MX_I2C1_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000924:	4b07      	ldr	r3, [pc, #28]	@ (8000944 <MX_I2C1_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <MX_I2C1_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	@ (8000944 <MX_I2C1_Init+0x50>)
 8000932:	f001 f8fb 	bl	8001b2c <HAL_I2C_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800093c:	f000 f868 	bl	8000a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200000c0 	.word	0x200000c0
 8000948:	40005400 	.word	0x40005400
 800094c:	000186a0 	.word	0x000186a0

08000950 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	@ 0x28
 8000954:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	f107 0314 	add.w	r3, r7, #20
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
 8000964:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b27      	ldr	r3, [pc, #156]	@ (8000a08 <MX_GPIO_Init+0xb8>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a26      	ldr	r2, [pc, #152]	@ (8000a08 <MX_GPIO_Init+0xb8>)
 8000970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b24      	ldr	r3, [pc, #144]	@ (8000a08 <MX_GPIO_Init+0xb8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b20      	ldr	r3, [pc, #128]	@ (8000a08 <MX_GPIO_Init+0xb8>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a1f      	ldr	r2, [pc, #124]	@ (8000a08 <MX_GPIO_Init+0xb8>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <MX_GPIO_Init+0xb8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <MX_GPIO_Init+0xb8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a18      	ldr	r2, [pc, #96]	@ (8000a08 <MX_GPIO_Init+0xb8>)
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b16      	ldr	r3, [pc, #88]	@ (8000a08 <MX_GPIO_Init+0xb8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0308 	and.w	r3, r3, #8
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <MX_GPIO_Init+0xb8>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a11      	ldr	r2, [pc, #68]	@ (8000a08 <MX_GPIO_Init+0xb8>)
 80009c4:	f043 0302 	orr.w	r3, r3, #2
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000a08 <MX_GPIO_Init+0xb8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0302 	and.w	r3, r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009dc:	480b      	ldr	r0, [pc, #44]	@ (8000a0c <MX_GPIO_Init+0xbc>)
 80009de:	f001 f88b 	bl	8001af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80009e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <MX_GPIO_Init+0xbc>)
 80009fc:	f000 fee0 	bl	80017c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	@ 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020c00 	.word	0x40020c00

08000a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a14:	b672      	cpsid	i
}
 8000a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <Error_Handler+0x8>

08000a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a46:	4a08      	ldr	r2, [pc, #32]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a56:	603b      	str	r3, [r7, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a5a:	2007      	movs	r0, #7
 8000a5c:	f000 fe7c 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800

08000a6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	@ 0x28
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a17      	ldr	r2, [pc, #92]	@ (8000ae8 <HAL_ADC_MspInit+0x7c>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d127      	bne.n	8000ade <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	4b16      	ldr	r3, [pc, #88]	@ (8000aec <HAL_ADC_MspInit+0x80>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	4a15      	ldr	r2, [pc, #84]	@ (8000aec <HAL_ADC_MspInit+0x80>)
 8000a98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a9e:	4b13      	ldr	r3, [pc, #76]	@ (8000aec <HAL_ADC_MspInit+0x80>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aa6:	613b      	str	r3, [r7, #16]
 8000aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <HAL_ADC_MspInit+0x80>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	4a0e      	ldr	r2, [pc, #56]	@ (8000aec <HAL_ADC_MspInit+0x80>)
 8000ab4:	f043 0301 	orr.w	r3, r3, #1
 8000ab8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aba:	4b0c      	ldr	r3, [pc, #48]	@ (8000aec <HAL_ADC_MspInit+0x80>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aca:	2303      	movs	r3, #3
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <HAL_ADC_MspInit+0x84>)
 8000ada:	f000 fe71 	bl	80017c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ade:	bf00      	nop
 8000ae0:	3728      	adds	r7, #40	@ 0x28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40012000 	.word	0x40012000
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40020000 	.word	0x40020000

08000af4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a19      	ldr	r2, [pc, #100]	@ (8000b78 <HAL_I2C_MspInit+0x84>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d12b      	bne.n	8000b6e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b18      	ldr	r3, [pc, #96]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a17      	ldr	r2, [pc, #92]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b15      	ldr	r3, [pc, #84]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b32:	23c0      	movs	r3, #192	@ 0xc0
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b36:	2312      	movs	r3, #18
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3e:	2303      	movs	r3, #3
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b42:	2304      	movs	r3, #4
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	480c      	ldr	r0, [pc, #48]	@ (8000b80 <HAL_I2C_MspInit+0x8c>)
 8000b4e:	f000 fe37 	bl	80017c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5a:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_I2C_MspInit+0x88>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b6e:	bf00      	nop
 8000b70:	3728      	adds	r7, #40	@ 0x28
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40005400 	.word	0x40005400
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40020400 	.word	0x40020400

08000b84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <NMI_Handler+0x4>

08000b8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <BusFault_Handler+0x4>

08000ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <UsageFault_Handler+0x4>

08000bac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bda:	f000 f8c7 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bec:	4a14      	ldr	r2, [pc, #80]	@ (8000c40 <_sbrk+0x5c>)
 8000bee:	4b15      	ldr	r3, [pc, #84]	@ (8000c44 <_sbrk+0x60>)
 8000bf0:	1ad3      	subs	r3, r2, r3
 8000bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf8:	4b13      	ldr	r3, [pc, #76]	@ (8000c48 <_sbrk+0x64>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d102      	bne.n	8000c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <_sbrk+0x64>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <_sbrk+0x68>)
 8000c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d207      	bcs.n	8000c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c14:	f002 f8d4 	bl	8002dc0 <__errno>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c22:	e009      	b.n	8000c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c24:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c2a:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4413      	add	r3, r2
 8000c32:	4a05      	ldr	r2, [pc, #20]	@ (8000c48 <_sbrk+0x64>)
 8000c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c36:	68fb      	ldr	r3, [r7, #12]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20020000 	.word	0x20020000
 8000c44:	00000400 	.word	0x00000400
 8000c48:	2000012c 	.word	0x2000012c
 8000c4c:	20000280 	.word	0x20000280

08000c50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	@ (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000c78:	f7ff ffea 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f002 f893 	bl	8002dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fd25 	bl	80006f4 <main>
  bx  lr    
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cb8:	08003730 	.word	0x08003730
  ldr r2, =_sbss
 8000cbc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cc0:	2000027c 	.word	0x2000027c

08000cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_Init+0x40>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <HAL_Init+0x40>)
 8000cd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000d08 <HAL_Init+0x40>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <HAL_Init+0x40>)
 8000cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <HAL_Init+0x40>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	@ (8000d08 <HAL_Init+0x40>)
 8000cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 fd31 	bl	8001758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f000 f808 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff fe8e 	bl	8000a1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023c00 	.word	0x40023c00

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <HAL_InitTick+0x54>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <HAL_InitTick+0x58>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 fd3b 	bl	80017a6 <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00e      	b.n	8000d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d80a      	bhi.n	8000d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d48:	f000 fd11 	bl	800176e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4c:	4a06      	ldr	r2, [pc, #24]	@ (8000d68 <HAL_InitTick+0x5c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000000 	.word	0x20000000
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000004 	.word	0x20000004

08000d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_IncTick+0x20>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <HAL_IncTick+0x24>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a04      	ldr	r2, [pc, #16]	@ (8000d90 <HAL_IncTick+0x24>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000130 	.word	0x20000130

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b03      	ldr	r3, [pc, #12]	@ (8000da8 <HAL_GetTick+0x14>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000130 	.word	0x20000130

08000dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000db4:	f7ff ffee 	bl	8000d94 <HAL_GetTick>
 8000db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dc4:	d005      	beq.n	8000dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8000df0 <HAL_Delay+0x44>)
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4413      	add	r3, r2
 8000dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dd2:	bf00      	nop
 8000dd4:	f7ff ffde 	bl	8000d94 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	68fa      	ldr	r2, [r7, #12]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d8f7      	bhi.n	8000dd4 <HAL_Delay+0x28>
  {
  }
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000008 	.word	0x20000008

08000df4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e033      	b.n	8000e72 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d109      	bne.n	8000e26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f7ff fe2a 	bl	8000a6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d118      	bne.n	8000e64 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e3a:	f023 0302 	bic.w	r3, r3, #2
 8000e3e:	f043 0202 	orr.w	r2, r3, #2
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 fad8 	bl	80013fc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2200      	movs	r2, #0
 8000e50:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e56:	f023 0303 	bic.w	r3, r3, #3
 8000e5a:	f043 0201 	orr.w	r2, r3, #1
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e62:	e001      	b.n	8000e68 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d101      	bne.n	8000e96 <HAL_ADC_Start+0x1a>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e0b2      	b.n	8000ffc <HAL_ADC_Start+0x180>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 0301 	and.w	r3, r3, #1
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d018      	beq.n	8000ede <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0201 	orr.w	r2, r2, #1
 8000eba:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ebc:	4b52      	ldr	r3, [pc, #328]	@ (8001008 <HAL_ADC_Start+0x18c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a52      	ldr	r2, [pc, #328]	@ (800100c <HAL_ADC_Start+0x190>)
 8000ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec6:	0c9a      	lsrs	r2, r3, #18
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000ed0:	e002      	b.n	8000ed8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d1f9      	bne.n	8000ed2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d17a      	bne.n	8000fe2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000ef4:	f023 0301 	bic.w	r3, r3, #1
 8000ef8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d007      	beq.n	8000f1e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f16:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000f2a:	d106      	bne.n	8000f3a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f30:	f023 0206 	bic.w	r2, r3, #6
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	645a      	str	r2, [r3, #68]	@ 0x44
 8000f38:	e002      	b.n	8000f40 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f48:	4b31      	ldr	r3, [pc, #196]	@ (8001010 <HAL_ADC_Start+0x194>)
 8000f4a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000f54:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 031f 	and.w	r3, r3, #31
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d12a      	bne.n	8000fb8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	4a2b      	ldr	r2, [pc, #172]	@ (8001014 <HAL_ADC_Start+0x198>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d015      	beq.n	8000f98 <HAL_ADC_Start+0x11c>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a29      	ldr	r2, [pc, #164]	@ (8001018 <HAL_ADC_Start+0x19c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d105      	bne.n	8000f82 <HAL_ADC_Start+0x106>
 8000f76:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <HAL_ADC_Start+0x194>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 031f 	and.w	r3, r3, #31
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00a      	beq.n	8000f98 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a25      	ldr	r2, [pc, #148]	@ (800101c <HAL_ADC_Start+0x1a0>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d136      	bne.n	8000ffa <HAL_ADC_Start+0x17e>
 8000f8c:	4b20      	ldr	r3, [pc, #128]	@ (8001010 <HAL_ADC_Start+0x194>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 0310 	and.w	r3, r3, #16
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d130      	bne.n	8000ffa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d129      	bne.n	8000ffa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	e020      	b.n	8000ffa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a15      	ldr	r2, [pc, #84]	@ (8001014 <HAL_ADC_Start+0x198>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d11b      	bne.n	8000ffa <HAL_ADC_Start+0x17e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d114      	bne.n	8000ffa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	e00b      	b.n	8000ffa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	f043 0210 	orr.w	r2, r3, #16
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ff2:	f043 0201 	orr.w	r2, r3, #1
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	20000000 	.word	0x20000000
 800100c:	431bde83 	.word	0x431bde83
 8001010:	40012300 	.word	0x40012300
 8001014:	40012000 	.word	0x40012000
 8001018:	40012100 	.word	0x40012100
 800101c:	40012200 	.word	0x40012200

08001020 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800102e:	2b01      	cmp	r3, #1
 8001030:	d101      	bne.n	8001036 <HAL_ADC_Stop+0x16>
 8001032:	2302      	movs	r3, #2
 8001034:	e021      	b.n	800107a <HAL_ADC_Stop+0x5a>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f022 0201 	bic.w	r2, r2, #1
 800104c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d109      	bne.n	8001070 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	f043 0201 	orr.w	r2, r3, #1
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr

08001086 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800109e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80010a2:	d113      	bne.n	80010cc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010b2:	d10b      	bne.n	80010cc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010b8:	f043 0220 	orr.w	r2, r3, #32
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e063      	b.n	8001194 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80010cc:	f7ff fe62 	bl	8000d94 <HAL_GetTick>
 80010d0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010d2:	e021      	b.n	8001118 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010da:	d01d      	beq.n	8001118 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d007      	beq.n	80010f2 <HAL_ADC_PollForConversion+0x6c>
 80010e2:	f7ff fe57 	bl	8000d94 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d212      	bcs.n	8001118 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b02      	cmp	r3, #2
 80010fe:	d00b      	beq.n	8001118 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	f043 0204 	orr.w	r2, r3, #4
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e03d      	b.n	8001194 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b02      	cmp	r3, #2
 8001124:	d1d6      	bne.n	80010d4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f06f 0212 	mvn.w	r2, #18
 800112e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d123      	bne.n	8001192 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800114e:	2b00      	cmp	r3, #0
 8001150:	d11f      	bne.n	8001192 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001158:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800116a:	2b00      	cmp	r3, #0
 800116c:	d111      	bne.n	8001192 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800117e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d105      	bne.n	8001192 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118a:	f043 0201 	orr.w	r2, r3, #1
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3710      	adds	r7, #16
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d101      	bne.n	80011d4 <HAL_ADC_ConfigChannel+0x1c>
 80011d0:	2302      	movs	r3, #2
 80011d2:	e105      	b.n	80013e0 <HAL_ADC_ConfigChannel+0x228>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2b09      	cmp	r3, #9
 80011e2:	d925      	bls.n	8001230 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68d9      	ldr	r1, [r3, #12]
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	461a      	mov	r2, r3
 80011f2:	4613      	mov	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	4413      	add	r3, r2
 80011f8:	3b1e      	subs	r3, #30
 80011fa:	2207      	movs	r2, #7
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43da      	mvns	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	400a      	ands	r2, r1
 8001208:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	68d9      	ldr	r1, [r3, #12]
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4618      	mov	r0, r3
 800121c:	4603      	mov	r3, r0
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	4403      	add	r3, r0
 8001222:	3b1e      	subs	r3, #30
 8001224:	409a      	lsls	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	430a      	orrs	r2, r1
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	e022      	b.n	8001276 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6919      	ldr	r1, [r3, #16]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	b29b      	uxth	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	4613      	mov	r3, r2
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	4413      	add	r3, r2
 8001244:	2207      	movs	r2, #7
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	400a      	ands	r2, r1
 8001252:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	6919      	ldr	r1, [r3, #16]
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	4603      	mov	r3, r0
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4403      	add	r3, r0
 800126c:	409a      	lsls	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b06      	cmp	r3, #6
 800127c:	d824      	bhi.n	80012c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	4613      	mov	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	4413      	add	r3, r2
 800128e:	3b05      	subs	r3, #5
 8001290:	221f      	movs	r2, #31
 8001292:	fa02 f303 	lsl.w	r3, r2, r3
 8001296:	43da      	mvns	r2, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	400a      	ands	r2, r1
 800129e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	3b05      	subs	r3, #5
 80012ba:	fa00 f203 	lsl.w	r2, r0, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80012c6:	e04c      	b.n	8001362 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	d824      	bhi.n	800131a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	3b23      	subs	r3, #35	@ 0x23
 80012e2:	221f      	movs	r2, #31
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43da      	mvns	r2, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	400a      	ands	r2, r1
 80012f0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	3b23      	subs	r3, #35	@ 0x23
 800130c:	fa00 f203 	lsl.w	r2, r0, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	631a      	str	r2, [r3, #48]	@ 0x30
 8001318:	e023      	b.n	8001362 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	4613      	mov	r3, r2
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4413      	add	r3, r2
 800132a:	3b41      	subs	r3, #65	@ 0x41
 800132c:	221f      	movs	r2, #31
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43da      	mvns	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	400a      	ands	r2, r1
 800133a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	4413      	add	r3, r2
 8001354:	3b41      	subs	r3, #65	@ 0x41
 8001356:	fa00 f203 	lsl.w	r2, r0, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	430a      	orrs	r2, r1
 8001360:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001362:	4b22      	ldr	r3, [pc, #136]	@ (80013ec <HAL_ADC_ConfigChannel+0x234>)
 8001364:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a21      	ldr	r2, [pc, #132]	@ (80013f0 <HAL_ADC_ConfigChannel+0x238>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d109      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1cc>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b12      	cmp	r3, #18
 8001376:	d105      	bne.n	8001384 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a19      	ldr	r2, [pc, #100]	@ (80013f0 <HAL_ADC_ConfigChannel+0x238>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d123      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x21e>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2b10      	cmp	r3, #16
 8001394:	d003      	beq.n	800139e <HAL_ADC_ConfigChannel+0x1e6>
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2b11      	cmp	r3, #17
 800139c:	d11b      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b10      	cmp	r3, #16
 80013b0:	d111      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013b2:	4b10      	ldr	r3, [pc, #64]	@ (80013f4 <HAL_ADC_ConfigChannel+0x23c>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a10      	ldr	r2, [pc, #64]	@ (80013f8 <HAL_ADC_ConfigChannel+0x240>)
 80013b8:	fba2 2303 	umull	r2, r3, r2, r3
 80013bc:	0c9a      	lsrs	r2, r3, #18
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013c8:	e002      	b.n	80013d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	3b01      	subs	r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f9      	bne.n	80013ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2200      	movs	r2, #0
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	40012300 	.word	0x40012300
 80013f0:	40012000 	.word	0x40012000
 80013f4:	20000000 	.word	0x20000000
 80013f8:	431bde83 	.word	0x431bde83

080013fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001404:	4b79      	ldr	r3, [pc, #484]	@ (80015ec <ADC_Init+0x1f0>)
 8001406:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	431a      	orrs	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001430:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6859      	ldr	r1, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691b      	ldr	r3, [r3, #16]
 800143c:	021a      	lsls	r2, r3, #8
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	430a      	orrs	r2, r1
 8001444:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001454:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6859      	ldr	r1, [r3, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	430a      	orrs	r2, r1
 8001466:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001476:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6899      	ldr	r1, [r3, #8]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	68da      	ldr	r2, [r3, #12]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148e:	4a58      	ldr	r2, [pc, #352]	@ (80015f0 <ADC_Init+0x1f4>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d022      	beq.n	80014da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6899      	ldr	r1, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689a      	ldr	r2, [r3, #8]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6899      	ldr	r1, [r3, #8]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	e00f      	b.n	80014fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014f8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0202 	bic.w	r2, r2, #2
 8001508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6899      	ldr	r1, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7e1b      	ldrb	r3, [r3, #24]
 8001514:	005a      	lsls	r2, r3, #1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d01b      	beq.n	8001560 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001536:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001546:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6859      	ldr	r1, [r3, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001552:	3b01      	subs	r3, #1
 8001554:	035a      	lsls	r2, r3, #13
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	430a      	orrs	r2, r1
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	e007      	b.n	8001570 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800156e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800157e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	3b01      	subs	r3, #1
 800158c:	051a      	lsls	r2, r3, #20
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	689a      	ldr	r2, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6899      	ldr	r1, [r3, #8]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015b2:	025a      	lsls	r2, r3, #9
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689a      	ldr	r2, [r3, #8]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6899      	ldr	r1, [r3, #8]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	029a      	lsls	r2, r3, #10
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	430a      	orrs	r2, r1
 80015de:	609a      	str	r2, [r3, #8]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	40012300 	.word	0x40012300
 80015f0:	0f000001 	.word	0x0f000001

080015f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001604:	4b0c      	ldr	r3, [pc, #48]	@ (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001610:	4013      	ands	r3, r2
 8001612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800161c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001620:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001626:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <__NVIC_SetPriorityGrouping+0x44>)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	60d3      	str	r3, [r2, #12]
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000ed00 	.word	0xe000ed00

0800163c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001640:	4b04      	ldr	r3, [pc, #16]	@ (8001654 <__NVIC_GetPriorityGrouping+0x18>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	f003 0307 	and.w	r3, r3, #7
}
 800164a:	4618      	mov	r0, r3
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	4603      	mov	r3, r0
 8001660:	6039      	str	r1, [r7, #0]
 8001662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	2b00      	cmp	r3, #0
 800166a:	db0a      	blt.n	8001682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	490c      	ldr	r1, [pc, #48]	@ (80016a4 <__NVIC_SetPriority+0x4c>)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	440b      	add	r3, r1
 800167c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001680:	e00a      	b.n	8001698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	b2da      	uxtb	r2, r3
 8001686:	4908      	ldr	r1, [pc, #32]	@ (80016a8 <__NVIC_SetPriority+0x50>)
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	f003 030f 	and.w	r3, r3, #15
 800168e:	3b04      	subs	r3, #4
 8001690:	0112      	lsls	r2, r2, #4
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	440b      	add	r3, r1
 8001696:	761a      	strb	r2, [r3, #24]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100
 80016a8:	e000ed00 	.word	0xe000ed00

080016ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b089      	sub	sp, #36	@ 0x24
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	60b9      	str	r1, [r7, #8]
 80016b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f1c3 0307 	rsb	r3, r3, #7
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	bf28      	it	cs
 80016ca:	2304      	movcs	r3, #4
 80016cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	3304      	adds	r3, #4
 80016d2:	2b06      	cmp	r3, #6
 80016d4:	d902      	bls.n	80016dc <NVIC_EncodePriority+0x30>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	3b03      	subs	r3, #3
 80016da:	e000      	b.n	80016de <NVIC_EncodePriority+0x32>
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43da      	mvns	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	43d9      	mvns	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	4313      	orrs	r3, r2
         );
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	@ 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3b01      	subs	r3, #1
 8001720:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001724:	d301      	bcc.n	800172a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001726:	2301      	movs	r3, #1
 8001728:	e00f      	b.n	800174a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <SysTick_Config+0x40>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3b01      	subs	r3, #1
 8001730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001732:	210f      	movs	r1, #15
 8001734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001738:	f7ff ff8e 	bl	8001658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800173c:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <SysTick_Config+0x40>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001742:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <SysTick_Config+0x40>)
 8001744:	2207      	movs	r2, #7
 8001746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	e000e010 	.word	0xe000e010

08001758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff47 	bl	80015f4 <__NVIC_SetPriorityGrouping>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800176e:	b580      	push	{r7, lr}
 8001770:	b086      	sub	sp, #24
 8001772:	af00      	add	r7, sp, #0
 8001774:	4603      	mov	r3, r0
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
 800177a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001780:	f7ff ff5c 	bl	800163c <__NVIC_GetPriorityGrouping>
 8001784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	6978      	ldr	r0, [r7, #20]
 800178c:	f7ff ff8e 	bl	80016ac <NVIC_EncodePriority>
 8001790:	4602      	mov	r2, r0
 8001792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001796:	4611      	mov	r1, r2
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff5d 	bl	8001658 <__NVIC_SetPriority>
}
 800179e:	bf00      	nop
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	b082      	sub	sp, #8
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ffb0 	bl	8001714 <SysTick_Config>
 80017b4:	4603      	mov	r3, r0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	@ 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017d2:	2300      	movs	r3, #0
 80017d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	61fb      	str	r3, [r7, #28]
 80017da:	e16b      	b.n	8001ab4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017dc:	2201      	movs	r2, #1
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	f040 815a 	bne.w	8001aae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b01      	cmp	r3, #1
 8001804:	d005      	beq.n	8001812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800180e:	2b02      	cmp	r3, #2
 8001810:	d130      	bne.n	8001874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	2203      	movs	r2, #3
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43db      	mvns	r3, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4013      	ands	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	68da      	ldr	r2, [r3, #12]
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001848:	2201      	movs	r2, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4013      	ands	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 0201 	and.w	r2, r3, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4313      	orrs	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b03      	cmp	r3, #3
 800187e:	d017      	beq.n	80018b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	2203      	movs	r2, #3
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	4013      	ands	r3, r2
 8001896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d123      	bne.n	8001904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	08da      	lsrs	r2, r3, #3
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3208      	adds	r2, #8
 80018c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	f003 0307 	and.w	r3, r3, #7
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	220f      	movs	r2, #15
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	691a      	ldr	r2, [r3, #16]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	08da      	lsrs	r2, r3, #3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	3208      	adds	r2, #8
 80018fe:	69b9      	ldr	r1, [r7, #24]
 8001900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	2203      	movs	r2, #3
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	43db      	mvns	r3, r3
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	4013      	ands	r3, r2
 800191a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f003 0203 	and.w	r2, r3, #3
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	fa02 f303 	lsl.w	r3, r2, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4313      	orrs	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 80b4 	beq.w	8001aae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b60      	ldr	r3, [pc, #384]	@ (8001acc <HAL_GPIO_Init+0x30c>)
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	4a5f      	ldr	r2, [pc, #380]	@ (8001acc <HAL_GPIO_Init+0x30c>)
 8001950:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001954:	6453      	str	r3, [r2, #68]	@ 0x44
 8001956:	4b5d      	ldr	r3, [pc, #372]	@ (8001acc <HAL_GPIO_Init+0x30c>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001962:	4a5b      	ldr	r2, [pc, #364]	@ (8001ad0 <HAL_GPIO_Init+0x310>)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	220f      	movs	r2, #15
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a52      	ldr	r2, [pc, #328]	@ (8001ad4 <HAL_GPIO_Init+0x314>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d02b      	beq.n	80019e6 <HAL_GPIO_Init+0x226>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a51      	ldr	r2, [pc, #324]	@ (8001ad8 <HAL_GPIO_Init+0x318>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d025      	beq.n	80019e2 <HAL_GPIO_Init+0x222>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a50      	ldr	r2, [pc, #320]	@ (8001adc <HAL_GPIO_Init+0x31c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01f      	beq.n	80019de <HAL_GPIO_Init+0x21e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4f      	ldr	r2, [pc, #316]	@ (8001ae0 <HAL_GPIO_Init+0x320>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d019      	beq.n	80019da <HAL_GPIO_Init+0x21a>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a4e      	ldr	r2, [pc, #312]	@ (8001ae4 <HAL_GPIO_Init+0x324>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0x216>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ae8 <HAL_GPIO_Init+0x328>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_GPIO_Init+0x212>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a4c      	ldr	r2, [pc, #304]	@ (8001aec <HAL_GPIO_Init+0x32c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <HAL_GPIO_Init+0x20e>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a4b      	ldr	r2, [pc, #300]	@ (8001af0 <HAL_GPIO_Init+0x330>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_GPIO_Init+0x20a>
 80019c6:	2307      	movs	r3, #7
 80019c8:	e00e      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019ca:	2308      	movs	r3, #8
 80019cc:	e00c      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019ce:	2306      	movs	r3, #6
 80019d0:	e00a      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019d2:	2305      	movs	r3, #5
 80019d4:	e008      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019d6:	2304      	movs	r3, #4
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019da:	2303      	movs	r3, #3
 80019dc:	e004      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019de:	2302      	movs	r3, #2
 80019e0:	e002      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_GPIO_Init+0x228>
 80019e6:	2300      	movs	r3, #0
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	f002 0203 	and.w	r2, r2, #3
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	4093      	lsls	r3, r2
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f8:	4935      	ldr	r1, [pc, #212]	@ (8001ad0 <HAL_GPIO_Init+0x310>)
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	089b      	lsrs	r3, r3, #2
 80019fe:	3302      	adds	r3, #2
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a06:	4b3b      	ldr	r3, [pc, #236]	@ (8001af4 <HAL_GPIO_Init+0x334>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a2a:	4a32      	ldr	r2, [pc, #200]	@ (8001af4 <HAL_GPIO_Init+0x334>)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a30:	4b30      	ldr	r3, [pc, #192]	@ (8001af4 <HAL_GPIO_Init+0x334>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a54:	4a27      	ldr	r2, [pc, #156]	@ (8001af4 <HAL_GPIO_Init+0x334>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a5a:	4b26      	ldr	r3, [pc, #152]	@ (8001af4 <HAL_GPIO_Init+0x334>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001af4 <HAL_GPIO_Init+0x334>)
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <HAL_GPIO_Init+0x334>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aa8:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <HAL_GPIO_Init+0x334>)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	61fb      	str	r3, [r7, #28]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	2b0f      	cmp	r3, #15
 8001ab8:	f67f ae90 	bls.w	80017dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001abc:	bf00      	nop
 8001abe:	bf00      	nop
 8001ac0:	3724      	adds	r7, #36	@ 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40013800 	.word	0x40013800
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40020800 	.word	0x40020800
 8001ae0:	40020c00 	.word	0x40020c00
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	40021400 	.word	0x40021400
 8001aec:	40021800 	.word	0x40021800
 8001af0:	40021c00 	.word	0x40021c00
 8001af4:	40013c00 	.word	0x40013c00

08001af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
 8001b04:	4613      	mov	r3, r2
 8001b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b14:	e003      	b.n	8001b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b16:	887b      	ldrh	r3, [r7, #2]
 8001b18:	041a      	lsls	r2, r3, #16
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	619a      	str	r2, [r3, #24]
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e12b      	b.n	8001d96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7fe ffce 	bl	8000af4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2224      	movs	r2, #36	@ 0x24
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0201 	bic.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b90:	f001 f8da 	bl	8002d48 <HAL_RCC_GetPCLK1Freq>
 8001b94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4a81      	ldr	r2, [pc, #516]	@ (8001da0 <HAL_I2C_Init+0x274>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d807      	bhi.n	8001bb0 <HAL_I2C_Init+0x84>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4a80      	ldr	r2, [pc, #512]	@ (8001da4 <HAL_I2C_Init+0x278>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	bf94      	ite	ls
 8001ba8:	2301      	movls	r3, #1
 8001baa:	2300      	movhi	r3, #0
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	e006      	b.n	8001bbe <HAL_I2C_Init+0x92>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	4a7d      	ldr	r2, [pc, #500]	@ (8001da8 <HAL_I2C_Init+0x27c>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	bf94      	ite	ls
 8001bb8:	2301      	movls	r3, #1
 8001bba:	2300      	movhi	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0e7      	b.n	8001d96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4a78      	ldr	r2, [pc, #480]	@ (8001dac <HAL_I2C_Init+0x280>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	0c9b      	lsrs	r3, r3, #18
 8001bd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4a6a      	ldr	r2, [pc, #424]	@ (8001da0 <HAL_I2C_Init+0x274>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d802      	bhi.n	8001c00 <HAL_I2C_Init+0xd4>
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	e009      	b.n	8001c14 <HAL_I2C_Init+0xe8>
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	4a69      	ldr	r2, [pc, #420]	@ (8001db0 <HAL_I2C_Init+0x284>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	099b      	lsrs	r3, r3, #6
 8001c12:	3301      	adds	r3, #1
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	495c      	ldr	r1, [pc, #368]	@ (8001da0 <HAL_I2C_Init+0x274>)
 8001c30:	428b      	cmp	r3, r1
 8001c32:	d819      	bhi.n	8001c68 <HAL_I2C_Init+0x13c>
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	1e59      	subs	r1, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c42:	1c59      	adds	r1, r3, #1
 8001c44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c48:	400b      	ands	r3, r1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00a      	beq.n	8001c64 <HAL_I2C_Init+0x138>
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1e59      	subs	r1, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c62:	e051      	b.n	8001d08 <HAL_I2C_Init+0x1dc>
 8001c64:	2304      	movs	r3, #4
 8001c66:	e04f      	b.n	8001d08 <HAL_I2C_Init+0x1dc>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d111      	bne.n	8001c94 <HAL_I2C_Init+0x168>
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	1e58      	subs	r0, r3, #1
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6859      	ldr	r1, [r3, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	440b      	add	r3, r1
 8001c7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c82:	3301      	adds	r3, #1
 8001c84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf0c      	ite	eq
 8001c8c:	2301      	moveq	r3, #1
 8001c8e:	2300      	movne	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	e012      	b.n	8001cba <HAL_I2C_Init+0x18e>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	1e58      	subs	r0, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	440b      	add	r3, r1
 8001ca2:	0099      	lsls	r1, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001caa:	3301      	adds	r3, #1
 8001cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_Init+0x196>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e022      	b.n	8001d08 <HAL_I2C_Init+0x1dc>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10e      	bne.n	8001ce8 <HAL_I2C_Init+0x1bc>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1e58      	subs	r0, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6859      	ldr	r1, [r3, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	440b      	add	r3, r1
 8001cd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cdc:	3301      	adds	r3, #1
 8001cde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ce2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ce6:	e00f      	b.n	8001d08 <HAL_I2C_Init+0x1dc>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	1e58      	subs	r0, r3, #1
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6859      	ldr	r1, [r3, #4]
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	0099      	lsls	r1, r3, #2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d04:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d08:	6879      	ldr	r1, [r7, #4]
 8001d0a:	6809      	ldr	r1, [r1, #0]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69da      	ldr	r2, [r3, #28]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d36:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6911      	ldr	r1, [r2, #16]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	68d2      	ldr	r2, [r2, #12]
 8001d42:	4311      	orrs	r1, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6812      	ldr	r2, [r2, #0]
 8001d48:	430b      	orrs	r3, r1
 8001d4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2220      	movs	r2, #32
 8001d82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	000186a0 	.word	0x000186a0
 8001da4:	001e847f 	.word	0x001e847f
 8001da8:	003d08ff 	.word	0x003d08ff
 8001dac:	431bde83 	.word	0x431bde83
 8001db0:	10624dd3 	.word	0x10624dd3

08001db4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af02      	add	r7, sp, #8
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	607a      	str	r2, [r7, #4]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	817b      	strh	r3, [r7, #10]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001dc8:	f7fe ffe4 	bl	8000d94 <HAL_GetTick>
 8001dcc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b20      	cmp	r3, #32
 8001dd8:	f040 80e0 	bne.w	8001f9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	2319      	movs	r3, #25
 8001de2:	2201      	movs	r2, #1
 8001de4:	4970      	ldr	r1, [pc, #448]	@ (8001fa8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f964 	bl	80020b4 <I2C_WaitOnFlagUntilTimeout>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
 8001df4:	e0d3      	b.n	8001f9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_I2C_Master_Transmit+0x50>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e0cc      	b.n	8001f9e <HAL_I2C_Master_Transmit+0x1ea>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d007      	beq.n	8001e2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f042 0201 	orr.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2221      	movs	r2, #33	@ 0x21
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2210      	movs	r2, #16
 8001e46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	893a      	ldrh	r2, [r7, #8]
 8001e5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4a50      	ldr	r2, [pc, #320]	@ (8001fac <HAL_I2C_Master_Transmit+0x1f8>)
 8001e6a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e6c:	8979      	ldrh	r1, [r7, #10]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	6a3a      	ldr	r2, [r7, #32]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 f89c 	bl	8001fb0 <I2C_MasterRequestWrite>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e08d      	b.n	8001f9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	613b      	str	r3, [r7, #16]
 8001e96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e98:	e066      	b.n	8001f68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	6a39      	ldr	r1, [r7, #32]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	f000 fa22 	bl	80022e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	d107      	bne.n	8001ec2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ec0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e06b      	b.n	8001f9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	781a      	ldrb	r2, [r3, #0]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b04      	cmp	r3, #4
 8001f02:	d11b      	bne.n	8001f3c <HAL_I2C_Master_Transmit+0x188>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d017      	beq.n	8001f3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f10:	781a      	ldrb	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	6a39      	ldr	r1, [r7, #32]
 8001f40:	68f8      	ldr	r0, [r7, #12]
 8001f42:	f000 fa19 	bl	8002378 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00d      	beq.n	8001f68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d107      	bne.n	8001f64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e01a      	b.n	8001f9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d194      	bne.n	8001e9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	e000      	b.n	8001f9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f9c:	2302      	movs	r3, #2
  }
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	00100002 	.word	0x00100002
 8001fac:	ffff0000 	.word	0xffff0000

08001fb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d006      	beq.n	8001fda <I2C_MasterRequestWrite+0x2a>
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d003      	beq.n	8001fda <I2C_MasterRequestWrite+0x2a>
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001fd8:	d108      	bne.n	8001fec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e00b      	b.n	8002004 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff0:	2b12      	cmp	r3, #18
 8001ff2:	d107      	bne.n	8002004 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002002:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f84f 	bl	80020b4 <I2C_WaitOnFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00d      	beq.n	8002038 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002026:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800202a:	d103      	bne.n	8002034 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002032:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e035      	b.n	80020a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002040:	d108      	bne.n	8002054 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002042:	897b      	ldrh	r3, [r7, #10]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002050:	611a      	str	r2, [r3, #16]
 8002052:	e01b      	b.n	800208c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002054:	897b      	ldrh	r3, [r7, #10]
 8002056:	11db      	asrs	r3, r3, #7
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f003 0306 	and.w	r3, r3, #6
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f063 030f 	orn	r3, r3, #15
 8002064:	b2da      	uxtb	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	490e      	ldr	r1, [pc, #56]	@ (80020ac <I2C_MasterRequestWrite+0xfc>)
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f898 	bl	80021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e010      	b.n	80020a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002082:	897b      	ldrh	r3, [r7, #10]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4907      	ldr	r1, [pc, #28]	@ (80020b0 <I2C_MasterRequestWrite+0x100>)
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f888 	bl	80021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	00010008 	.word	0x00010008
 80020b0:	00010002 	.word	0x00010002

080020b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	4613      	mov	r3, r2
 80020c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020c4:	e048      	b.n	8002158 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020cc:	d044      	beq.n	8002158 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ce:	f7fe fe61 	bl	8000d94 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d302      	bcc.n	80020e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d139      	bne.n	8002158 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	0c1b      	lsrs	r3, r3, #16
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d10d      	bne.n	800210a <I2C_WaitOnFlagUntilTimeout+0x56>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	43da      	mvns	r2, r3
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	4013      	ands	r3, r2
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	e00c      	b.n	8002124 <I2C_WaitOnFlagUntilTimeout+0x70>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	43da      	mvns	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	4013      	ands	r3, r2
 8002116:	b29b      	uxth	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	429a      	cmp	r2, r3
 8002128:	d116      	bne.n	8002158 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2200      	movs	r2, #0
 800212e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002144:	f043 0220 	orr.w	r2, r3, #32
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e023      	b.n	80021a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	0c1b      	lsrs	r3, r3, #16
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d10d      	bne.n	800217e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	43da      	mvns	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	4013      	ands	r3, r2
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf0c      	ite	eq
 8002174:	2301      	moveq	r3, #1
 8002176:	2300      	movne	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	e00c      	b.n	8002198 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	43da      	mvns	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4013      	ands	r3, r2
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	bf0c      	ite	eq
 8002190:	2301      	moveq	r3, #1
 8002192:	2300      	movne	r3, #0
 8002194:	b2db      	uxtb	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	429a      	cmp	r2, r3
 800219c:	d093      	beq.n	80020c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021b6:	e071      	b.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021c6:	d123      	bne.n	8002210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80021e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2220      	movs	r2, #32
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fc:	f043 0204 	orr.w	r2, r3, #4
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e067      	b.n	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002216:	d041      	beq.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002218:	f7fe fdbc 	bl	8000d94 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	429a      	cmp	r2, r3
 8002226:	d302      	bcc.n	800222e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d136      	bne.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	0c1b      	lsrs	r3, r3, #16
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d10c      	bne.n	8002252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	4013      	ands	r3, r2
 8002244:	b29b      	uxth	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	bf14      	ite	ne
 800224a:	2301      	movne	r3, #1
 800224c:	2300      	moveq	r3, #0
 800224e:	b2db      	uxtb	r3, r3
 8002250:	e00b      	b.n	800226a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	43da      	mvns	r2, r3
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	4013      	ands	r3, r2
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	bf14      	ite	ne
 8002264:	2301      	movne	r3, #1
 8002266:	2300      	moveq	r3, #0
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d016      	beq.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e021      	b.n	80022e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	0c1b      	lsrs	r3, r3, #16
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d10c      	bne.n	80022c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	43da      	mvns	r2, r3
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	4013      	ands	r3, r2
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	e00b      	b.n	80022d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	699b      	ldr	r3, [r3, #24]
 80022c6:	43da      	mvns	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	4013      	ands	r3, r2
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf14      	ite	ne
 80022d2:	2301      	movne	r3, #1
 80022d4:	2300      	moveq	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f47f af6d 	bne.w	80021b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80022de:	2300      	movs	r3, #0
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3710      	adds	r7, #16
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f4:	e034      	b.n	8002360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 f886 	bl	8002408 <I2C_IsAcknowledgeFailed>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e034      	b.n	8002370 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800230c:	d028      	beq.n	8002360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230e:	f7fe fd41 	bl	8000d94 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	429a      	cmp	r2, r3
 800231c:	d302      	bcc.n	8002324 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d11d      	bne.n	8002360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800232e:	2b80      	cmp	r3, #128	@ 0x80
 8002330:	d016      	beq.n	8002360 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234c:	f043 0220 	orr.w	r2, r3, #32
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e007      	b.n	8002370 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800236a:	2b80      	cmp	r3, #128	@ 0x80
 800236c:	d1c3      	bne.n	80022f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}

08002378 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002384:	e034      	b.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f83e 	bl	8002408 <I2C_IsAcknowledgeFailed>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e034      	b.n	8002400 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800239c:	d028      	beq.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800239e:	f7fe fcf9 	bl	8000d94 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d302      	bcc.n	80023b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d11d      	bne.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	f003 0304 	and.w	r3, r3, #4
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d016      	beq.n	80023f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023dc:	f043 0220 	orr.w	r2, r3, #32
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e007      	b.n	8002400 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d1c3      	bne.n	8002386 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3710      	adds	r7, #16
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800241a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800241e:	d11b      	bne.n	8002458 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002428:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2220      	movs	r2, #32
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	f043 0204 	orr.w	r2, r3, #4
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e267      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d075      	beq.n	8002572 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002486:	4b88      	ldr	r3, [pc, #544]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b04      	cmp	r3, #4
 8002490:	d00c      	beq.n	80024ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002492:	4b85      	ldr	r3, [pc, #532]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800249a:	2b08      	cmp	r3, #8
 800249c:	d112      	bne.n	80024c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249e:	4b82      	ldr	r3, [pc, #520]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024aa:	d10b      	bne.n	80024c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	4b7e      	ldr	r3, [pc, #504]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d05b      	beq.n	8002570 <HAL_RCC_OscConfig+0x108>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d157      	bne.n	8002570 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e242      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024cc:	d106      	bne.n	80024dc <HAL_RCC_OscConfig+0x74>
 80024ce:	4b76      	ldr	r3, [pc, #472]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a75      	ldr	r2, [pc, #468]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e01d      	b.n	8002518 <HAL_RCC_OscConfig+0xb0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCC_OscConfig+0x98>
 80024e6:	4b70      	ldr	r3, [pc, #448]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a6f      	ldr	r2, [pc, #444]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b6d      	ldr	r3, [pc, #436]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a6c      	ldr	r2, [pc, #432]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80024f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	e00b      	b.n	8002518 <HAL_RCC_OscConfig+0xb0>
 8002500:	4b69      	ldr	r3, [pc, #420]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a68      	ldr	r2, [pc, #416]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800250a:	6013      	str	r3, [r2, #0]
 800250c:	4b66      	ldr	r3, [pc, #408]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a65      	ldr	r2, [pc, #404]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002512:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002516:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d013      	beq.n	8002548 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002520:	f7fe fc38 	bl	8000d94 <HAL_GetTick>
 8002524:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002528:	f7fe fc34 	bl	8000d94 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e207      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253a:	4b5b      	ldr	r3, [pc, #364]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0f0      	beq.n	8002528 <HAL_RCC_OscConfig+0xc0>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002548:	f7fe fc24 	bl	8000d94 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002550:	f7fe fc20 	bl	8000d94 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	@ 0x64
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e1f3      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002562:	4b51      	ldr	r3, [pc, #324]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0xe8>
 800256e:	e000      	b.n	8002572 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d063      	beq.n	8002646 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800257e:	4b4a      	ldr	r3, [pc, #296]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00b      	beq.n	80025a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258a:	4b47      	ldr	r3, [pc, #284]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002592:	2b08      	cmp	r3, #8
 8002594:	d11c      	bne.n	80025d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002596:	4b44      	ldr	r3, [pc, #272]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d116      	bne.n	80025d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a2:	4b41      	ldr	r3, [pc, #260]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d005      	beq.n	80025ba <HAL_RCC_OscConfig+0x152>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d001      	beq.n	80025ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e1c7      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ba:	4b3b      	ldr	r3, [pc, #236]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	4937      	ldr	r1, [pc, #220]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	e03a      	b.n	8002646 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d020      	beq.n	800261a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d8:	4b34      	ldr	r3, [pc, #208]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025de:	f7fe fbd9 	bl	8000d94 <HAL_GetTick>
 80025e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e4:	e008      	b.n	80025f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e6:	f7fe fbd5 	bl	8000d94 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e1a8      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f8:	4b2b      	ldr	r3, [pc, #172]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f0      	beq.n	80025e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002604:	4b28      	ldr	r3, [pc, #160]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4925      	ldr	r1, [pc, #148]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 8002614:	4313      	orrs	r3, r2
 8002616:	600b      	str	r3, [r1, #0]
 8002618:	e015      	b.n	8002646 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800261a:	4b24      	ldr	r3, [pc, #144]	@ (80026ac <HAL_RCC_OscConfig+0x244>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7fe fbb8 	bl	8000d94 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002628:	f7fe fbb4 	bl	8000d94 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e187      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800263a:	4b1b      	ldr	r3, [pc, #108]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d036      	beq.n	80026c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d016      	beq.n	8002688 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800265a:	4b15      	ldr	r3, [pc, #84]	@ (80026b0 <HAL_RCC_OscConfig+0x248>)
 800265c:	2201      	movs	r2, #1
 800265e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002660:	f7fe fb98 	bl	8000d94 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002668:	f7fe fb94 	bl	8000d94 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e167      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267a:	4b0b      	ldr	r3, [pc, #44]	@ (80026a8 <HAL_RCC_OscConfig+0x240>)
 800267c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x200>
 8002686:	e01b      	b.n	80026c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002688:	4b09      	ldr	r3, [pc, #36]	@ (80026b0 <HAL_RCC_OscConfig+0x248>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268e:	f7fe fb81 	bl	8000d94 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002694:	e00e      	b.n	80026b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002696:	f7fe fb7d 	bl	8000d94 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d907      	bls.n	80026b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e150      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
 80026a8:	40023800 	.word	0x40023800
 80026ac:	42470000 	.word	0x42470000
 80026b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b4:	4b88      	ldr	r3, [pc, #544]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1ea      	bne.n	8002696 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8097 	beq.w	80027fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ce:	2300      	movs	r3, #0
 80026d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d2:	4b81      	ldr	r3, [pc, #516]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026de:	2300      	movs	r3, #0
 80026e0:	60bb      	str	r3, [r7, #8]
 80026e2:	4b7d      	ldr	r3, [pc, #500]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	4a7c      	ldr	r2, [pc, #496]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80026ee:	4b7a      	ldr	r3, [pc, #488]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	4b77      	ldr	r3, [pc, #476]	@ (80028dc <HAL_RCC_OscConfig+0x474>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270a:	4b74      	ldr	r3, [pc, #464]	@ (80028dc <HAL_RCC_OscConfig+0x474>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a73      	ldr	r2, [pc, #460]	@ (80028dc <HAL_RCC_OscConfig+0x474>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002716:	f7fe fb3d 	bl	8000d94 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7fe fb39 	bl	8000d94 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e10c      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	4b6a      	ldr	r3, [pc, #424]	@ (80028dc <HAL_RCC_OscConfig+0x474>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x2ea>
 8002744:	4b64      	ldr	r3, [pc, #400]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002748:	4a63      	ldr	r2, [pc, #396]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002750:	e01c      	b.n	800278c <HAL_RCC_OscConfig+0x324>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b05      	cmp	r3, #5
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x30c>
 800275a:	4b5f      	ldr	r3, [pc, #380]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	4a5e      	ldr	r2, [pc, #376]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002760:	f043 0304 	orr.w	r3, r3, #4
 8002764:	6713      	str	r3, [r2, #112]	@ 0x70
 8002766:	4b5c      	ldr	r3, [pc, #368]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276a:	4a5b      	ldr	r2, [pc, #364]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	6713      	str	r3, [r2, #112]	@ 0x70
 8002772:	e00b      	b.n	800278c <HAL_RCC_OscConfig+0x324>
 8002774:	4b58      	ldr	r3, [pc, #352]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002778:	4a57      	ldr	r2, [pc, #348]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002780:	4b55      	ldr	r3, [pc, #340]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002784:	4a54      	ldr	r2, [pc, #336]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002786:	f023 0304 	bic.w	r3, r3, #4
 800278a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d015      	beq.n	80027c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002794:	f7fe fafe 	bl	8000d94 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279a:	e00a      	b.n	80027b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279c:	f7fe fafa 	bl	8000d94 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0cb      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b2:	4b49      	ldr	r3, [pc, #292]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0ee      	beq.n	800279c <HAL_RCC_OscConfig+0x334>
 80027be:	e014      	b.n	80027ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c0:	f7fe fae8 	bl	8000d94 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c8:	f7fe fae4 	bl	8000d94 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e0b5      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027de:	4b3e      	ldr	r3, [pc, #248]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1ee      	bne.n	80027c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ea:	7dfb      	ldrb	r3, [r7, #23]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d105      	bne.n	80027fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f0:	4b39      	ldr	r3, [pc, #228]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f4:	4a38      	ldr	r2, [pc, #224]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80027f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80a1 	beq.w	8002948 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002806:	4b34      	ldr	r3, [pc, #208]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 030c 	and.w	r3, r3, #12
 800280e:	2b08      	cmp	r3, #8
 8002810:	d05c      	beq.n	80028cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b02      	cmp	r3, #2
 8002818:	d141      	bne.n	800289e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281a:	4b31      	ldr	r3, [pc, #196]	@ (80028e0 <HAL_RCC_OscConfig+0x478>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7fe fab8 	bl	8000d94 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002828:	f7fe fab4 	bl	8000d94 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e087      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	4b27      	ldr	r3, [pc, #156]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69da      	ldr	r2, [r3, #28]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	019b      	lsls	r3, r3, #6
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	3b01      	subs	r3, #1
 8002860:	041b      	lsls	r3, r3, #16
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002868:	061b      	lsls	r3, r3, #24
 800286a:	491b      	ldr	r1, [pc, #108]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002870:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <HAL_RCC_OscConfig+0x478>)
 8002872:	2201      	movs	r2, #1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe fa8d 	bl	8000d94 <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe fa89 	bl	8000d94 <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e05c      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002890:	4b11      	ldr	r3, [pc, #68]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x416>
 800289c:	e054      	b.n	8002948 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289e:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <HAL_RCC_OscConfig+0x478>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7fe fa76 	bl	8000d94 <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe fa72 	bl	8000d94 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e045      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <HAL_RCC_OscConfig+0x470>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x444>
 80028ca:	e03d      	b.n	8002948 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d107      	bne.n	80028e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e038      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40007000 	.word	0x40007000
 80028e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <HAL_RCC_OscConfig+0x4ec>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d028      	beq.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d121      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d11a      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002914:	4013      	ands	r3, r2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800291a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800291c:	4293      	cmp	r3, r2
 800291e:	d111      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	3b01      	subs	r3, #1
 800292e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002930:	429a      	cmp	r2, r3
 8002932:	d107      	bne.n	8002944 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800

08002958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e0cc      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b68      	ldr	r3, [pc, #416]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d90c      	bls.n	8002994 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b65      	ldr	r3, [pc, #404]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002982:	4b63      	ldr	r3, [pc, #396]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	683a      	ldr	r2, [r7, #0]
 800298c:	429a      	cmp	r2, r3
 800298e:	d001      	beq.n	8002994 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e0b8      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d020      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ac:	4b59      	ldr	r3, [pc, #356]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4a58      	ldr	r2, [pc, #352]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029c4:	4b53      	ldr	r3, [pc, #332]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4a52      	ldr	r2, [pc, #328]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80029ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d0:	4b50      	ldr	r3, [pc, #320]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	494d      	ldr	r1, [pc, #308]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d044      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b47      	ldr	r3, [pc, #284]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d119      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e07f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d003      	beq.n	8002a16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a16:	4b3f      	ldr	r3, [pc, #252]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e06f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a26:	4b3b      	ldr	r3, [pc, #236]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e067      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	4b37      	ldr	r3, [pc, #220]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f023 0203 	bic.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4934      	ldr	r1, [pc, #208]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a48:	f7fe f9a4 	bl	8000d94 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe f9a0 	bl	8000d94 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e04f      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	4b2b      	ldr	r3, [pc, #172]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 020c 	and.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1eb      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a78:	4b25      	ldr	r3, [pc, #148]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d20c      	bcs.n	8002aa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	4b22      	ldr	r3, [pc, #136]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b20      	ldr	r3, [pc, #128]	@ (8002b10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e032      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aac:	4b19      	ldr	r3, [pc, #100]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4916      	ldr	r1, [pc, #88]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aca:	4b12      	ldr	r3, [pc, #72]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	490e      	ldr	r1, [pc, #56]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ade:	f000 f821 	bl	8002b24 <HAL_RCC_GetSysClockFreq>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	490a      	ldr	r1, [pc, #40]	@ (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002af0:	5ccb      	ldrb	r3, [r1, r3]
 8002af2:	fa22 f303 	lsr.w	r3, r2, r3
 8002af6:	4a09      	ldr	r2, [pc, #36]	@ (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002af8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002afa:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7fe f904 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40023c00 	.word	0x40023c00
 8002b14:	40023800 	.word	0x40023800
 8002b18:	080036d4 	.word	0x080036d4
 8002b1c:	20000000 	.word	0x20000000
 8002b20:	20000004 	.word	0x20000004

08002b24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b28:	b094      	sub	sp, #80	@ 0x50
 8002b2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b30:	2300      	movs	r3, #0
 8002b32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b34:	2300      	movs	r3, #0
 8002b36:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b3c:	4b79      	ldr	r3, [pc, #484]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d00d      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x40>
 8002b48:	2b08      	cmp	r3, #8
 8002b4a:	f200 80e1 	bhi.w	8002d10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d002      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x34>
 8002b52:	2b04      	cmp	r3, #4
 8002b54:	d003      	beq.n	8002b5e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b56:	e0db      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b73      	ldr	r3, [pc, #460]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002b5c:	e0db      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5e:	4b73      	ldr	r3, [pc, #460]	@ (8002d2c <HAL_RCC_GetSysClockFreq+0x208>)
 8002b60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b62:	e0d8      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b64:	4b6f      	ldr	r3, [pc, #444]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b6c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b6e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d063      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	099b      	lsrs	r3, r3, #6
 8002b80:	2200      	movs	r2, #0
 8002b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b84:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b8e:	2300      	movs	r3, #0
 8002b90:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b96:	4622      	mov	r2, r4
 8002b98:	462b      	mov	r3, r5
 8002b9a:	f04f 0000 	mov.w	r0, #0
 8002b9e:	f04f 0100 	mov.w	r1, #0
 8002ba2:	0159      	lsls	r1, r3, #5
 8002ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ba8:	0150      	lsls	r0, r2, #5
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4621      	mov	r1, r4
 8002bb0:	1a51      	subs	r1, r2, r1
 8002bb2:	6139      	str	r1, [r7, #16]
 8002bb4:	4629      	mov	r1, r5
 8002bb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bc8:	4659      	mov	r1, fp
 8002bca:	018b      	lsls	r3, r1, #6
 8002bcc:	4651      	mov	r1, sl
 8002bce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bd2:	4651      	mov	r1, sl
 8002bd4:	018a      	lsls	r2, r1, #6
 8002bd6:	4651      	mov	r1, sl
 8002bd8:	ebb2 0801 	subs.w	r8, r2, r1
 8002bdc:	4659      	mov	r1, fp
 8002bde:	eb63 0901 	sbc.w	r9, r3, r1
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	f04f 0300 	mov.w	r3, #0
 8002bea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002bf6:	4690      	mov	r8, r2
 8002bf8:	4699      	mov	r9, r3
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	eb18 0303 	adds.w	r3, r8, r3
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	462b      	mov	r3, r5
 8002c04:	eb49 0303 	adc.w	r3, r9, r3
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c16:	4629      	mov	r1, r5
 8002c18:	024b      	lsls	r3, r1, #9
 8002c1a:	4621      	mov	r1, r4
 8002c1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c20:	4621      	mov	r1, r4
 8002c22:	024a      	lsls	r2, r1, #9
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c34:	f7fd fb1c 	bl	8000270 <__aeabi_uldivmod>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c40:	e058      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c42:	4b38      	ldr	r3, [pc, #224]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	2300      	movs	r3, #0
 8002c56:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	f04f 0000 	mov.w	r0, #0
 8002c64:	f04f 0100 	mov.w	r1, #0
 8002c68:	0159      	lsls	r1, r3, #5
 8002c6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c6e:	0150      	lsls	r0, r2, #5
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4641      	mov	r1, r8
 8002c76:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c7a:	4649      	mov	r1, r9
 8002c7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c94:	ebb2 040a 	subs.w	r4, r2, sl
 8002c98:	eb63 050b 	sbc.w	r5, r3, fp
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	00eb      	lsls	r3, r5, #3
 8002ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002caa:	00e2      	lsls	r2, r4, #3
 8002cac:	4614      	mov	r4, r2
 8002cae:	461d      	mov	r5, r3
 8002cb0:	4643      	mov	r3, r8
 8002cb2:	18e3      	adds	r3, r4, r3
 8002cb4:	603b      	str	r3, [r7, #0]
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	eb45 0303 	adc.w	r3, r5, r3
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	f04f 0200 	mov.w	r2, #0
 8002cc2:	f04f 0300 	mov.w	r3, #0
 8002cc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cca:	4629      	mov	r1, r5
 8002ccc:	028b      	lsls	r3, r1, #10
 8002cce:	4621      	mov	r1, r4
 8002cd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	028a      	lsls	r2, r1, #10
 8002cd8:	4610      	mov	r0, r2
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002cde:	2200      	movs	r2, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
 8002ce2:	61fa      	str	r2, [r7, #28]
 8002ce4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ce8:	f7fd fac2 	bl	8000270 <__aeabi_uldivmod>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	0c1b      	lsrs	r3, r3, #16
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002d04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d0e:	e002      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d10:	4b05      	ldr	r3, [pc, #20]	@ (8002d28 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3750      	adds	r7, #80	@ 0x50
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	00f42400 	.word	0x00f42400
 8002d2c:	007a1200 	.word	0x007a1200

08002d30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d34:	4b03      	ldr	r3, [pc, #12]	@ (8002d44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d36:	681b      	ldr	r3, [r3, #0]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	20000000 	.word	0x20000000

08002d48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d4c:	f7ff fff0 	bl	8002d30 <HAL_RCC_GetHCLKFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	0a9b      	lsrs	r3, r3, #10
 8002d58:	f003 0307 	and.w	r3, r3, #7
 8002d5c:	4903      	ldr	r1, [pc, #12]	@ (8002d6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5e:	5ccb      	ldrb	r3, [r1, r3]
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	080036e4 	.word	0x080036e4

08002d70 <siprintf>:
 8002d70:	b40e      	push	{r1, r2, r3}
 8002d72:	b500      	push	{lr}
 8002d74:	b09c      	sub	sp, #112	@ 0x70
 8002d76:	ab1d      	add	r3, sp, #116	@ 0x74
 8002d78:	9002      	str	r0, [sp, #8]
 8002d7a:	9006      	str	r0, [sp, #24]
 8002d7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002d80:	4809      	ldr	r0, [pc, #36]	@ (8002da8 <siprintf+0x38>)
 8002d82:	9107      	str	r1, [sp, #28]
 8002d84:	9104      	str	r1, [sp, #16]
 8002d86:	4909      	ldr	r1, [pc, #36]	@ (8002dac <siprintf+0x3c>)
 8002d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8002d8c:	9105      	str	r1, [sp, #20]
 8002d8e:	6800      	ldr	r0, [r0, #0]
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	a902      	add	r1, sp, #8
 8002d94:	f000 f994 	bl	80030c0 <_svfiprintf_r>
 8002d98:	9b02      	ldr	r3, [sp, #8]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	b01c      	add	sp, #112	@ 0x70
 8002da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002da4:	b003      	add	sp, #12
 8002da6:	4770      	bx	lr
 8002da8:	2000000c 	.word	0x2000000c
 8002dac:	ffff0208 	.word	0xffff0208

08002db0 <memset>:
 8002db0:	4402      	add	r2, r0
 8002db2:	4603      	mov	r3, r0
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d100      	bne.n	8002dba <memset+0xa>
 8002db8:	4770      	bx	lr
 8002dba:	f803 1b01 	strb.w	r1, [r3], #1
 8002dbe:	e7f9      	b.n	8002db4 <memset+0x4>

08002dc0 <__errno>:
 8002dc0:	4b01      	ldr	r3, [pc, #4]	@ (8002dc8 <__errno+0x8>)
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	2000000c 	.word	0x2000000c

08002dcc <__libc_init_array>:
 8002dcc:	b570      	push	{r4, r5, r6, lr}
 8002dce:	4d0d      	ldr	r5, [pc, #52]	@ (8002e04 <__libc_init_array+0x38>)
 8002dd0:	4c0d      	ldr	r4, [pc, #52]	@ (8002e08 <__libc_init_array+0x3c>)
 8002dd2:	1b64      	subs	r4, r4, r5
 8002dd4:	10a4      	asrs	r4, r4, #2
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	42a6      	cmp	r6, r4
 8002dda:	d109      	bne.n	8002df0 <__libc_init_array+0x24>
 8002ddc:	4d0b      	ldr	r5, [pc, #44]	@ (8002e0c <__libc_init_array+0x40>)
 8002dde:	4c0c      	ldr	r4, [pc, #48]	@ (8002e10 <__libc_init_array+0x44>)
 8002de0:	f000 fc66 	bl	80036b0 <_init>
 8002de4:	1b64      	subs	r4, r4, r5
 8002de6:	10a4      	asrs	r4, r4, #2
 8002de8:	2600      	movs	r6, #0
 8002dea:	42a6      	cmp	r6, r4
 8002dec:	d105      	bne.n	8002dfa <__libc_init_array+0x2e>
 8002dee:	bd70      	pop	{r4, r5, r6, pc}
 8002df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002df4:	4798      	blx	r3
 8002df6:	3601      	adds	r6, #1
 8002df8:	e7ee      	b.n	8002dd8 <__libc_init_array+0xc>
 8002dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfe:	4798      	blx	r3
 8002e00:	3601      	adds	r6, #1
 8002e02:	e7f2      	b.n	8002dea <__libc_init_array+0x1e>
 8002e04:	08003728 	.word	0x08003728
 8002e08:	08003728 	.word	0x08003728
 8002e0c:	08003728 	.word	0x08003728
 8002e10:	0800372c 	.word	0x0800372c

08002e14 <__retarget_lock_acquire_recursive>:
 8002e14:	4770      	bx	lr

08002e16 <__retarget_lock_release_recursive>:
 8002e16:	4770      	bx	lr

08002e18 <_free_r>:
 8002e18:	b538      	push	{r3, r4, r5, lr}
 8002e1a:	4605      	mov	r5, r0
 8002e1c:	2900      	cmp	r1, #0
 8002e1e:	d041      	beq.n	8002ea4 <_free_r+0x8c>
 8002e20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e24:	1f0c      	subs	r4, r1, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bfb8      	it	lt
 8002e2a:	18e4      	addlt	r4, r4, r3
 8002e2c:	f000 f8e0 	bl	8002ff0 <__malloc_lock>
 8002e30:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea8 <_free_r+0x90>)
 8002e32:	6813      	ldr	r3, [r2, #0]
 8002e34:	b933      	cbnz	r3, 8002e44 <_free_r+0x2c>
 8002e36:	6063      	str	r3, [r4, #4]
 8002e38:	6014      	str	r4, [r2, #0]
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e40:	f000 b8dc 	b.w	8002ffc <__malloc_unlock>
 8002e44:	42a3      	cmp	r3, r4
 8002e46:	d908      	bls.n	8002e5a <_free_r+0x42>
 8002e48:	6820      	ldr	r0, [r4, #0]
 8002e4a:	1821      	adds	r1, r4, r0
 8002e4c:	428b      	cmp	r3, r1
 8002e4e:	bf01      	itttt	eq
 8002e50:	6819      	ldreq	r1, [r3, #0]
 8002e52:	685b      	ldreq	r3, [r3, #4]
 8002e54:	1809      	addeq	r1, r1, r0
 8002e56:	6021      	streq	r1, [r4, #0]
 8002e58:	e7ed      	b.n	8002e36 <_free_r+0x1e>
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	b10b      	cbz	r3, 8002e64 <_free_r+0x4c>
 8002e60:	42a3      	cmp	r3, r4
 8002e62:	d9fa      	bls.n	8002e5a <_free_r+0x42>
 8002e64:	6811      	ldr	r1, [r2, #0]
 8002e66:	1850      	adds	r0, r2, r1
 8002e68:	42a0      	cmp	r0, r4
 8002e6a:	d10b      	bne.n	8002e84 <_free_r+0x6c>
 8002e6c:	6820      	ldr	r0, [r4, #0]
 8002e6e:	4401      	add	r1, r0
 8002e70:	1850      	adds	r0, r2, r1
 8002e72:	4283      	cmp	r3, r0
 8002e74:	6011      	str	r1, [r2, #0]
 8002e76:	d1e0      	bne.n	8002e3a <_free_r+0x22>
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	6053      	str	r3, [r2, #4]
 8002e7e:	4408      	add	r0, r1
 8002e80:	6010      	str	r0, [r2, #0]
 8002e82:	e7da      	b.n	8002e3a <_free_r+0x22>
 8002e84:	d902      	bls.n	8002e8c <_free_r+0x74>
 8002e86:	230c      	movs	r3, #12
 8002e88:	602b      	str	r3, [r5, #0]
 8002e8a:	e7d6      	b.n	8002e3a <_free_r+0x22>
 8002e8c:	6820      	ldr	r0, [r4, #0]
 8002e8e:	1821      	adds	r1, r4, r0
 8002e90:	428b      	cmp	r3, r1
 8002e92:	bf04      	itt	eq
 8002e94:	6819      	ldreq	r1, [r3, #0]
 8002e96:	685b      	ldreq	r3, [r3, #4]
 8002e98:	6063      	str	r3, [r4, #4]
 8002e9a:	bf04      	itt	eq
 8002e9c:	1809      	addeq	r1, r1, r0
 8002e9e:	6021      	streq	r1, [r4, #0]
 8002ea0:	6054      	str	r4, [r2, #4]
 8002ea2:	e7ca      	b.n	8002e3a <_free_r+0x22>
 8002ea4:	bd38      	pop	{r3, r4, r5, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000278 	.word	0x20000278

08002eac <sbrk_aligned>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	4e0f      	ldr	r6, [pc, #60]	@ (8002eec <sbrk_aligned+0x40>)
 8002eb0:	460c      	mov	r4, r1
 8002eb2:	6831      	ldr	r1, [r6, #0]
 8002eb4:	4605      	mov	r5, r0
 8002eb6:	b911      	cbnz	r1, 8002ebe <sbrk_aligned+0x12>
 8002eb8:	f000 fba6 	bl	8003608 <_sbrk_r>
 8002ebc:	6030      	str	r0, [r6, #0]
 8002ebe:	4621      	mov	r1, r4
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	f000 fba1 	bl	8003608 <_sbrk_r>
 8002ec6:	1c43      	adds	r3, r0, #1
 8002ec8:	d103      	bne.n	8002ed2 <sbrk_aligned+0x26>
 8002eca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002ece:	4620      	mov	r0, r4
 8002ed0:	bd70      	pop	{r4, r5, r6, pc}
 8002ed2:	1cc4      	adds	r4, r0, #3
 8002ed4:	f024 0403 	bic.w	r4, r4, #3
 8002ed8:	42a0      	cmp	r0, r4
 8002eda:	d0f8      	beq.n	8002ece <sbrk_aligned+0x22>
 8002edc:	1a21      	subs	r1, r4, r0
 8002ede:	4628      	mov	r0, r5
 8002ee0:	f000 fb92 	bl	8003608 <_sbrk_r>
 8002ee4:	3001      	adds	r0, #1
 8002ee6:	d1f2      	bne.n	8002ece <sbrk_aligned+0x22>
 8002ee8:	e7ef      	b.n	8002eca <sbrk_aligned+0x1e>
 8002eea:	bf00      	nop
 8002eec:	20000274 	.word	0x20000274

08002ef0 <_malloc_r>:
 8002ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ef4:	1ccd      	adds	r5, r1, #3
 8002ef6:	f025 0503 	bic.w	r5, r5, #3
 8002efa:	3508      	adds	r5, #8
 8002efc:	2d0c      	cmp	r5, #12
 8002efe:	bf38      	it	cc
 8002f00:	250c      	movcc	r5, #12
 8002f02:	2d00      	cmp	r5, #0
 8002f04:	4606      	mov	r6, r0
 8002f06:	db01      	blt.n	8002f0c <_malloc_r+0x1c>
 8002f08:	42a9      	cmp	r1, r5
 8002f0a:	d904      	bls.n	8002f16 <_malloc_r+0x26>
 8002f0c:	230c      	movs	r3, #12
 8002f0e:	6033      	str	r3, [r6, #0]
 8002f10:	2000      	movs	r0, #0
 8002f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002fec <_malloc_r+0xfc>
 8002f1a:	f000 f869 	bl	8002ff0 <__malloc_lock>
 8002f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8002f22:	461c      	mov	r4, r3
 8002f24:	bb44      	cbnz	r4, 8002f78 <_malloc_r+0x88>
 8002f26:	4629      	mov	r1, r5
 8002f28:	4630      	mov	r0, r6
 8002f2a:	f7ff ffbf 	bl	8002eac <sbrk_aligned>
 8002f2e:	1c43      	adds	r3, r0, #1
 8002f30:	4604      	mov	r4, r0
 8002f32:	d158      	bne.n	8002fe6 <_malloc_r+0xf6>
 8002f34:	f8d8 4000 	ldr.w	r4, [r8]
 8002f38:	4627      	mov	r7, r4
 8002f3a:	2f00      	cmp	r7, #0
 8002f3c:	d143      	bne.n	8002fc6 <_malloc_r+0xd6>
 8002f3e:	2c00      	cmp	r4, #0
 8002f40:	d04b      	beq.n	8002fda <_malloc_r+0xea>
 8002f42:	6823      	ldr	r3, [r4, #0]
 8002f44:	4639      	mov	r1, r7
 8002f46:	4630      	mov	r0, r6
 8002f48:	eb04 0903 	add.w	r9, r4, r3
 8002f4c:	f000 fb5c 	bl	8003608 <_sbrk_r>
 8002f50:	4581      	cmp	r9, r0
 8002f52:	d142      	bne.n	8002fda <_malloc_r+0xea>
 8002f54:	6821      	ldr	r1, [r4, #0]
 8002f56:	1a6d      	subs	r5, r5, r1
 8002f58:	4629      	mov	r1, r5
 8002f5a:	4630      	mov	r0, r6
 8002f5c:	f7ff ffa6 	bl	8002eac <sbrk_aligned>
 8002f60:	3001      	adds	r0, #1
 8002f62:	d03a      	beq.n	8002fda <_malloc_r+0xea>
 8002f64:	6823      	ldr	r3, [r4, #0]
 8002f66:	442b      	add	r3, r5
 8002f68:	6023      	str	r3, [r4, #0]
 8002f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	bb62      	cbnz	r2, 8002fcc <_malloc_r+0xdc>
 8002f72:	f8c8 7000 	str.w	r7, [r8]
 8002f76:	e00f      	b.n	8002f98 <_malloc_r+0xa8>
 8002f78:	6822      	ldr	r2, [r4, #0]
 8002f7a:	1b52      	subs	r2, r2, r5
 8002f7c:	d420      	bmi.n	8002fc0 <_malloc_r+0xd0>
 8002f7e:	2a0b      	cmp	r2, #11
 8002f80:	d917      	bls.n	8002fb2 <_malloc_r+0xc2>
 8002f82:	1961      	adds	r1, r4, r5
 8002f84:	42a3      	cmp	r3, r4
 8002f86:	6025      	str	r5, [r4, #0]
 8002f88:	bf18      	it	ne
 8002f8a:	6059      	strne	r1, [r3, #4]
 8002f8c:	6863      	ldr	r3, [r4, #4]
 8002f8e:	bf08      	it	eq
 8002f90:	f8c8 1000 	streq.w	r1, [r8]
 8002f94:	5162      	str	r2, [r4, r5]
 8002f96:	604b      	str	r3, [r1, #4]
 8002f98:	4630      	mov	r0, r6
 8002f9a:	f000 f82f 	bl	8002ffc <__malloc_unlock>
 8002f9e:	f104 000b 	add.w	r0, r4, #11
 8002fa2:	1d23      	adds	r3, r4, #4
 8002fa4:	f020 0007 	bic.w	r0, r0, #7
 8002fa8:	1ac2      	subs	r2, r0, r3
 8002faa:	bf1c      	itt	ne
 8002fac:	1a1b      	subne	r3, r3, r0
 8002fae:	50a3      	strne	r3, [r4, r2]
 8002fb0:	e7af      	b.n	8002f12 <_malloc_r+0x22>
 8002fb2:	6862      	ldr	r2, [r4, #4]
 8002fb4:	42a3      	cmp	r3, r4
 8002fb6:	bf0c      	ite	eq
 8002fb8:	f8c8 2000 	streq.w	r2, [r8]
 8002fbc:	605a      	strne	r2, [r3, #4]
 8002fbe:	e7eb      	b.n	8002f98 <_malloc_r+0xa8>
 8002fc0:	4623      	mov	r3, r4
 8002fc2:	6864      	ldr	r4, [r4, #4]
 8002fc4:	e7ae      	b.n	8002f24 <_malloc_r+0x34>
 8002fc6:	463c      	mov	r4, r7
 8002fc8:	687f      	ldr	r7, [r7, #4]
 8002fca:	e7b6      	b.n	8002f3a <_malloc_r+0x4a>
 8002fcc:	461a      	mov	r2, r3
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	42a3      	cmp	r3, r4
 8002fd2:	d1fb      	bne.n	8002fcc <_malloc_r+0xdc>
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	6053      	str	r3, [r2, #4]
 8002fd8:	e7de      	b.n	8002f98 <_malloc_r+0xa8>
 8002fda:	230c      	movs	r3, #12
 8002fdc:	6033      	str	r3, [r6, #0]
 8002fde:	4630      	mov	r0, r6
 8002fe0:	f000 f80c 	bl	8002ffc <__malloc_unlock>
 8002fe4:	e794      	b.n	8002f10 <_malloc_r+0x20>
 8002fe6:	6005      	str	r5, [r0, #0]
 8002fe8:	e7d6      	b.n	8002f98 <_malloc_r+0xa8>
 8002fea:	bf00      	nop
 8002fec:	20000278 	.word	0x20000278

08002ff0 <__malloc_lock>:
 8002ff0:	4801      	ldr	r0, [pc, #4]	@ (8002ff8 <__malloc_lock+0x8>)
 8002ff2:	f7ff bf0f 	b.w	8002e14 <__retarget_lock_acquire_recursive>
 8002ff6:	bf00      	nop
 8002ff8:	20000270 	.word	0x20000270

08002ffc <__malloc_unlock>:
 8002ffc:	4801      	ldr	r0, [pc, #4]	@ (8003004 <__malloc_unlock+0x8>)
 8002ffe:	f7ff bf0a 	b.w	8002e16 <__retarget_lock_release_recursive>
 8003002:	bf00      	nop
 8003004:	20000270 	.word	0x20000270

08003008 <__ssputs_r>:
 8003008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800300c:	688e      	ldr	r6, [r1, #8]
 800300e:	461f      	mov	r7, r3
 8003010:	42be      	cmp	r6, r7
 8003012:	680b      	ldr	r3, [r1, #0]
 8003014:	4682      	mov	sl, r0
 8003016:	460c      	mov	r4, r1
 8003018:	4690      	mov	r8, r2
 800301a:	d82d      	bhi.n	8003078 <__ssputs_r+0x70>
 800301c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003020:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003024:	d026      	beq.n	8003074 <__ssputs_r+0x6c>
 8003026:	6965      	ldr	r5, [r4, #20]
 8003028:	6909      	ldr	r1, [r1, #16]
 800302a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800302e:	eba3 0901 	sub.w	r9, r3, r1
 8003032:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003036:	1c7b      	adds	r3, r7, #1
 8003038:	444b      	add	r3, r9
 800303a:	106d      	asrs	r5, r5, #1
 800303c:	429d      	cmp	r5, r3
 800303e:	bf38      	it	cc
 8003040:	461d      	movcc	r5, r3
 8003042:	0553      	lsls	r3, r2, #21
 8003044:	d527      	bpl.n	8003096 <__ssputs_r+0x8e>
 8003046:	4629      	mov	r1, r5
 8003048:	f7ff ff52 	bl	8002ef0 <_malloc_r>
 800304c:	4606      	mov	r6, r0
 800304e:	b360      	cbz	r0, 80030aa <__ssputs_r+0xa2>
 8003050:	6921      	ldr	r1, [r4, #16]
 8003052:	464a      	mov	r2, r9
 8003054:	f000 fae8 	bl	8003628 <memcpy>
 8003058:	89a3      	ldrh	r3, [r4, #12]
 800305a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800305e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003062:	81a3      	strh	r3, [r4, #12]
 8003064:	6126      	str	r6, [r4, #16]
 8003066:	6165      	str	r5, [r4, #20]
 8003068:	444e      	add	r6, r9
 800306a:	eba5 0509 	sub.w	r5, r5, r9
 800306e:	6026      	str	r6, [r4, #0]
 8003070:	60a5      	str	r5, [r4, #8]
 8003072:	463e      	mov	r6, r7
 8003074:	42be      	cmp	r6, r7
 8003076:	d900      	bls.n	800307a <__ssputs_r+0x72>
 8003078:	463e      	mov	r6, r7
 800307a:	6820      	ldr	r0, [r4, #0]
 800307c:	4632      	mov	r2, r6
 800307e:	4641      	mov	r1, r8
 8003080:	f000 faa8 	bl	80035d4 <memmove>
 8003084:	68a3      	ldr	r3, [r4, #8]
 8003086:	1b9b      	subs	r3, r3, r6
 8003088:	60a3      	str	r3, [r4, #8]
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	4433      	add	r3, r6
 800308e:	6023      	str	r3, [r4, #0]
 8003090:	2000      	movs	r0, #0
 8003092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003096:	462a      	mov	r2, r5
 8003098:	f000 fad4 	bl	8003644 <_realloc_r>
 800309c:	4606      	mov	r6, r0
 800309e:	2800      	cmp	r0, #0
 80030a0:	d1e0      	bne.n	8003064 <__ssputs_r+0x5c>
 80030a2:	6921      	ldr	r1, [r4, #16]
 80030a4:	4650      	mov	r0, sl
 80030a6:	f7ff feb7 	bl	8002e18 <_free_r>
 80030aa:	230c      	movs	r3, #12
 80030ac:	f8ca 3000 	str.w	r3, [sl]
 80030b0:	89a3      	ldrh	r3, [r4, #12]
 80030b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030b6:	81a3      	strh	r3, [r4, #12]
 80030b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030bc:	e7e9      	b.n	8003092 <__ssputs_r+0x8a>
	...

080030c0 <_svfiprintf_r>:
 80030c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030c4:	4698      	mov	r8, r3
 80030c6:	898b      	ldrh	r3, [r1, #12]
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	b09d      	sub	sp, #116	@ 0x74
 80030cc:	4607      	mov	r7, r0
 80030ce:	460d      	mov	r5, r1
 80030d0:	4614      	mov	r4, r2
 80030d2:	d510      	bpl.n	80030f6 <_svfiprintf_r+0x36>
 80030d4:	690b      	ldr	r3, [r1, #16]
 80030d6:	b973      	cbnz	r3, 80030f6 <_svfiprintf_r+0x36>
 80030d8:	2140      	movs	r1, #64	@ 0x40
 80030da:	f7ff ff09 	bl	8002ef0 <_malloc_r>
 80030de:	6028      	str	r0, [r5, #0]
 80030e0:	6128      	str	r0, [r5, #16]
 80030e2:	b930      	cbnz	r0, 80030f2 <_svfiprintf_r+0x32>
 80030e4:	230c      	movs	r3, #12
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80030ec:	b01d      	add	sp, #116	@ 0x74
 80030ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030f2:	2340      	movs	r3, #64	@ 0x40
 80030f4:	616b      	str	r3, [r5, #20]
 80030f6:	2300      	movs	r3, #0
 80030f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80030fa:	2320      	movs	r3, #32
 80030fc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003100:	f8cd 800c 	str.w	r8, [sp, #12]
 8003104:	2330      	movs	r3, #48	@ 0x30
 8003106:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80032a4 <_svfiprintf_r+0x1e4>
 800310a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800310e:	f04f 0901 	mov.w	r9, #1
 8003112:	4623      	mov	r3, r4
 8003114:	469a      	mov	sl, r3
 8003116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800311a:	b10a      	cbz	r2, 8003120 <_svfiprintf_r+0x60>
 800311c:	2a25      	cmp	r2, #37	@ 0x25
 800311e:	d1f9      	bne.n	8003114 <_svfiprintf_r+0x54>
 8003120:	ebba 0b04 	subs.w	fp, sl, r4
 8003124:	d00b      	beq.n	800313e <_svfiprintf_r+0x7e>
 8003126:	465b      	mov	r3, fp
 8003128:	4622      	mov	r2, r4
 800312a:	4629      	mov	r1, r5
 800312c:	4638      	mov	r0, r7
 800312e:	f7ff ff6b 	bl	8003008 <__ssputs_r>
 8003132:	3001      	adds	r0, #1
 8003134:	f000 80a7 	beq.w	8003286 <_svfiprintf_r+0x1c6>
 8003138:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800313a:	445a      	add	r2, fp
 800313c:	9209      	str	r2, [sp, #36]	@ 0x24
 800313e:	f89a 3000 	ldrb.w	r3, [sl]
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 809f 	beq.w	8003286 <_svfiprintf_r+0x1c6>
 8003148:	2300      	movs	r3, #0
 800314a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800314e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003152:	f10a 0a01 	add.w	sl, sl, #1
 8003156:	9304      	str	r3, [sp, #16]
 8003158:	9307      	str	r3, [sp, #28]
 800315a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800315e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003160:	4654      	mov	r4, sl
 8003162:	2205      	movs	r2, #5
 8003164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003168:	484e      	ldr	r0, [pc, #312]	@ (80032a4 <_svfiprintf_r+0x1e4>)
 800316a:	f7fd f831 	bl	80001d0 <memchr>
 800316e:	9a04      	ldr	r2, [sp, #16]
 8003170:	b9d8      	cbnz	r0, 80031aa <_svfiprintf_r+0xea>
 8003172:	06d0      	lsls	r0, r2, #27
 8003174:	bf44      	itt	mi
 8003176:	2320      	movmi	r3, #32
 8003178:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800317c:	0711      	lsls	r1, r2, #28
 800317e:	bf44      	itt	mi
 8003180:	232b      	movmi	r3, #43	@ 0x2b
 8003182:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003186:	f89a 3000 	ldrb.w	r3, [sl]
 800318a:	2b2a      	cmp	r3, #42	@ 0x2a
 800318c:	d015      	beq.n	80031ba <_svfiprintf_r+0xfa>
 800318e:	9a07      	ldr	r2, [sp, #28]
 8003190:	4654      	mov	r4, sl
 8003192:	2000      	movs	r0, #0
 8003194:	f04f 0c0a 	mov.w	ip, #10
 8003198:	4621      	mov	r1, r4
 800319a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800319e:	3b30      	subs	r3, #48	@ 0x30
 80031a0:	2b09      	cmp	r3, #9
 80031a2:	d94b      	bls.n	800323c <_svfiprintf_r+0x17c>
 80031a4:	b1b0      	cbz	r0, 80031d4 <_svfiprintf_r+0x114>
 80031a6:	9207      	str	r2, [sp, #28]
 80031a8:	e014      	b.n	80031d4 <_svfiprintf_r+0x114>
 80031aa:	eba0 0308 	sub.w	r3, r0, r8
 80031ae:	fa09 f303 	lsl.w	r3, r9, r3
 80031b2:	4313      	orrs	r3, r2
 80031b4:	9304      	str	r3, [sp, #16]
 80031b6:	46a2      	mov	sl, r4
 80031b8:	e7d2      	b.n	8003160 <_svfiprintf_r+0xa0>
 80031ba:	9b03      	ldr	r3, [sp, #12]
 80031bc:	1d19      	adds	r1, r3, #4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	9103      	str	r1, [sp, #12]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bfbb      	ittet	lt
 80031c6:	425b      	neglt	r3, r3
 80031c8:	f042 0202 	orrlt.w	r2, r2, #2
 80031cc:	9307      	strge	r3, [sp, #28]
 80031ce:	9307      	strlt	r3, [sp, #28]
 80031d0:	bfb8      	it	lt
 80031d2:	9204      	strlt	r2, [sp, #16]
 80031d4:	7823      	ldrb	r3, [r4, #0]
 80031d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80031d8:	d10a      	bne.n	80031f0 <_svfiprintf_r+0x130>
 80031da:	7863      	ldrb	r3, [r4, #1]
 80031dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80031de:	d132      	bne.n	8003246 <_svfiprintf_r+0x186>
 80031e0:	9b03      	ldr	r3, [sp, #12]
 80031e2:	1d1a      	adds	r2, r3, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	9203      	str	r2, [sp, #12]
 80031e8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80031ec:	3402      	adds	r4, #2
 80031ee:	9305      	str	r3, [sp, #20]
 80031f0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80032b4 <_svfiprintf_r+0x1f4>
 80031f4:	7821      	ldrb	r1, [r4, #0]
 80031f6:	2203      	movs	r2, #3
 80031f8:	4650      	mov	r0, sl
 80031fa:	f7fc ffe9 	bl	80001d0 <memchr>
 80031fe:	b138      	cbz	r0, 8003210 <_svfiprintf_r+0x150>
 8003200:	9b04      	ldr	r3, [sp, #16]
 8003202:	eba0 000a 	sub.w	r0, r0, sl
 8003206:	2240      	movs	r2, #64	@ 0x40
 8003208:	4082      	lsls	r2, r0
 800320a:	4313      	orrs	r3, r2
 800320c:	3401      	adds	r4, #1
 800320e:	9304      	str	r3, [sp, #16]
 8003210:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003214:	4824      	ldr	r0, [pc, #144]	@ (80032a8 <_svfiprintf_r+0x1e8>)
 8003216:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800321a:	2206      	movs	r2, #6
 800321c:	f7fc ffd8 	bl	80001d0 <memchr>
 8003220:	2800      	cmp	r0, #0
 8003222:	d036      	beq.n	8003292 <_svfiprintf_r+0x1d2>
 8003224:	4b21      	ldr	r3, [pc, #132]	@ (80032ac <_svfiprintf_r+0x1ec>)
 8003226:	bb1b      	cbnz	r3, 8003270 <_svfiprintf_r+0x1b0>
 8003228:	9b03      	ldr	r3, [sp, #12]
 800322a:	3307      	adds	r3, #7
 800322c:	f023 0307 	bic.w	r3, r3, #7
 8003230:	3308      	adds	r3, #8
 8003232:	9303      	str	r3, [sp, #12]
 8003234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003236:	4433      	add	r3, r6
 8003238:	9309      	str	r3, [sp, #36]	@ 0x24
 800323a:	e76a      	b.n	8003112 <_svfiprintf_r+0x52>
 800323c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003240:	460c      	mov	r4, r1
 8003242:	2001      	movs	r0, #1
 8003244:	e7a8      	b.n	8003198 <_svfiprintf_r+0xd8>
 8003246:	2300      	movs	r3, #0
 8003248:	3401      	adds	r4, #1
 800324a:	9305      	str	r3, [sp, #20]
 800324c:	4619      	mov	r1, r3
 800324e:	f04f 0c0a 	mov.w	ip, #10
 8003252:	4620      	mov	r0, r4
 8003254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003258:	3a30      	subs	r2, #48	@ 0x30
 800325a:	2a09      	cmp	r2, #9
 800325c:	d903      	bls.n	8003266 <_svfiprintf_r+0x1a6>
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0c6      	beq.n	80031f0 <_svfiprintf_r+0x130>
 8003262:	9105      	str	r1, [sp, #20]
 8003264:	e7c4      	b.n	80031f0 <_svfiprintf_r+0x130>
 8003266:	fb0c 2101 	mla	r1, ip, r1, r2
 800326a:	4604      	mov	r4, r0
 800326c:	2301      	movs	r3, #1
 800326e:	e7f0      	b.n	8003252 <_svfiprintf_r+0x192>
 8003270:	ab03      	add	r3, sp, #12
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	462a      	mov	r2, r5
 8003276:	4b0e      	ldr	r3, [pc, #56]	@ (80032b0 <_svfiprintf_r+0x1f0>)
 8003278:	a904      	add	r1, sp, #16
 800327a:	4638      	mov	r0, r7
 800327c:	f3af 8000 	nop.w
 8003280:	1c42      	adds	r2, r0, #1
 8003282:	4606      	mov	r6, r0
 8003284:	d1d6      	bne.n	8003234 <_svfiprintf_r+0x174>
 8003286:	89ab      	ldrh	r3, [r5, #12]
 8003288:	065b      	lsls	r3, r3, #25
 800328a:	f53f af2d 	bmi.w	80030e8 <_svfiprintf_r+0x28>
 800328e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003290:	e72c      	b.n	80030ec <_svfiprintf_r+0x2c>
 8003292:	ab03      	add	r3, sp, #12
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	462a      	mov	r2, r5
 8003298:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <_svfiprintf_r+0x1f0>)
 800329a:	a904      	add	r1, sp, #16
 800329c:	4638      	mov	r0, r7
 800329e:	f000 f879 	bl	8003394 <_printf_i>
 80032a2:	e7ed      	b.n	8003280 <_svfiprintf_r+0x1c0>
 80032a4:	080036ec 	.word	0x080036ec
 80032a8:	080036f6 	.word	0x080036f6
 80032ac:	00000000 	.word	0x00000000
 80032b0:	08003009 	.word	0x08003009
 80032b4:	080036f2 	.word	0x080036f2

080032b8 <_printf_common>:
 80032b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032bc:	4616      	mov	r6, r2
 80032be:	4698      	mov	r8, r3
 80032c0:	688a      	ldr	r2, [r1, #8]
 80032c2:	690b      	ldr	r3, [r1, #16]
 80032c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80032c8:	4293      	cmp	r3, r2
 80032ca:	bfb8      	it	lt
 80032cc:	4613      	movlt	r3, r2
 80032ce:	6033      	str	r3, [r6, #0]
 80032d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80032d4:	4607      	mov	r7, r0
 80032d6:	460c      	mov	r4, r1
 80032d8:	b10a      	cbz	r2, 80032de <_printf_common+0x26>
 80032da:	3301      	adds	r3, #1
 80032dc:	6033      	str	r3, [r6, #0]
 80032de:	6823      	ldr	r3, [r4, #0]
 80032e0:	0699      	lsls	r1, r3, #26
 80032e2:	bf42      	ittt	mi
 80032e4:	6833      	ldrmi	r3, [r6, #0]
 80032e6:	3302      	addmi	r3, #2
 80032e8:	6033      	strmi	r3, [r6, #0]
 80032ea:	6825      	ldr	r5, [r4, #0]
 80032ec:	f015 0506 	ands.w	r5, r5, #6
 80032f0:	d106      	bne.n	8003300 <_printf_common+0x48>
 80032f2:	f104 0a19 	add.w	sl, r4, #25
 80032f6:	68e3      	ldr	r3, [r4, #12]
 80032f8:	6832      	ldr	r2, [r6, #0]
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	42ab      	cmp	r3, r5
 80032fe:	dc26      	bgt.n	800334e <_printf_common+0x96>
 8003300:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003304:	6822      	ldr	r2, [r4, #0]
 8003306:	3b00      	subs	r3, #0
 8003308:	bf18      	it	ne
 800330a:	2301      	movne	r3, #1
 800330c:	0692      	lsls	r2, r2, #26
 800330e:	d42b      	bmi.n	8003368 <_printf_common+0xb0>
 8003310:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003314:	4641      	mov	r1, r8
 8003316:	4638      	mov	r0, r7
 8003318:	47c8      	blx	r9
 800331a:	3001      	adds	r0, #1
 800331c:	d01e      	beq.n	800335c <_printf_common+0xa4>
 800331e:	6823      	ldr	r3, [r4, #0]
 8003320:	6922      	ldr	r2, [r4, #16]
 8003322:	f003 0306 	and.w	r3, r3, #6
 8003326:	2b04      	cmp	r3, #4
 8003328:	bf02      	ittt	eq
 800332a:	68e5      	ldreq	r5, [r4, #12]
 800332c:	6833      	ldreq	r3, [r6, #0]
 800332e:	1aed      	subeq	r5, r5, r3
 8003330:	68a3      	ldr	r3, [r4, #8]
 8003332:	bf0c      	ite	eq
 8003334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003338:	2500      	movne	r5, #0
 800333a:	4293      	cmp	r3, r2
 800333c:	bfc4      	itt	gt
 800333e:	1a9b      	subgt	r3, r3, r2
 8003340:	18ed      	addgt	r5, r5, r3
 8003342:	2600      	movs	r6, #0
 8003344:	341a      	adds	r4, #26
 8003346:	42b5      	cmp	r5, r6
 8003348:	d11a      	bne.n	8003380 <_printf_common+0xc8>
 800334a:	2000      	movs	r0, #0
 800334c:	e008      	b.n	8003360 <_printf_common+0xa8>
 800334e:	2301      	movs	r3, #1
 8003350:	4652      	mov	r2, sl
 8003352:	4641      	mov	r1, r8
 8003354:	4638      	mov	r0, r7
 8003356:	47c8      	blx	r9
 8003358:	3001      	adds	r0, #1
 800335a:	d103      	bne.n	8003364 <_printf_common+0xac>
 800335c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003364:	3501      	adds	r5, #1
 8003366:	e7c6      	b.n	80032f6 <_printf_common+0x3e>
 8003368:	18e1      	adds	r1, r4, r3
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	2030      	movs	r0, #48	@ 0x30
 800336e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003372:	4422      	add	r2, r4
 8003374:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003378:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800337c:	3302      	adds	r3, #2
 800337e:	e7c7      	b.n	8003310 <_printf_common+0x58>
 8003380:	2301      	movs	r3, #1
 8003382:	4622      	mov	r2, r4
 8003384:	4641      	mov	r1, r8
 8003386:	4638      	mov	r0, r7
 8003388:	47c8      	blx	r9
 800338a:	3001      	adds	r0, #1
 800338c:	d0e6      	beq.n	800335c <_printf_common+0xa4>
 800338e:	3601      	adds	r6, #1
 8003390:	e7d9      	b.n	8003346 <_printf_common+0x8e>
	...

08003394 <_printf_i>:
 8003394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003398:	7e0f      	ldrb	r7, [r1, #24]
 800339a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800339c:	2f78      	cmp	r7, #120	@ 0x78
 800339e:	4691      	mov	r9, r2
 80033a0:	4680      	mov	r8, r0
 80033a2:	460c      	mov	r4, r1
 80033a4:	469a      	mov	sl, r3
 80033a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80033aa:	d807      	bhi.n	80033bc <_printf_i+0x28>
 80033ac:	2f62      	cmp	r7, #98	@ 0x62
 80033ae:	d80a      	bhi.n	80033c6 <_printf_i+0x32>
 80033b0:	2f00      	cmp	r7, #0
 80033b2:	f000 80d2 	beq.w	800355a <_printf_i+0x1c6>
 80033b6:	2f58      	cmp	r7, #88	@ 0x58
 80033b8:	f000 80b9 	beq.w	800352e <_printf_i+0x19a>
 80033bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80033c4:	e03a      	b.n	800343c <_printf_i+0xa8>
 80033c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80033ca:	2b15      	cmp	r3, #21
 80033cc:	d8f6      	bhi.n	80033bc <_printf_i+0x28>
 80033ce:	a101      	add	r1, pc, #4	@ (adr r1, 80033d4 <_printf_i+0x40>)
 80033d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80033d4:	0800342d 	.word	0x0800342d
 80033d8:	08003441 	.word	0x08003441
 80033dc:	080033bd 	.word	0x080033bd
 80033e0:	080033bd 	.word	0x080033bd
 80033e4:	080033bd 	.word	0x080033bd
 80033e8:	080033bd 	.word	0x080033bd
 80033ec:	08003441 	.word	0x08003441
 80033f0:	080033bd 	.word	0x080033bd
 80033f4:	080033bd 	.word	0x080033bd
 80033f8:	080033bd 	.word	0x080033bd
 80033fc:	080033bd 	.word	0x080033bd
 8003400:	08003541 	.word	0x08003541
 8003404:	0800346b 	.word	0x0800346b
 8003408:	080034fb 	.word	0x080034fb
 800340c:	080033bd 	.word	0x080033bd
 8003410:	080033bd 	.word	0x080033bd
 8003414:	08003563 	.word	0x08003563
 8003418:	080033bd 	.word	0x080033bd
 800341c:	0800346b 	.word	0x0800346b
 8003420:	080033bd 	.word	0x080033bd
 8003424:	080033bd 	.word	0x080033bd
 8003428:	08003503 	.word	0x08003503
 800342c:	6833      	ldr	r3, [r6, #0]
 800342e:	1d1a      	adds	r2, r3, #4
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6032      	str	r2, [r6, #0]
 8003434:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003438:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800343c:	2301      	movs	r3, #1
 800343e:	e09d      	b.n	800357c <_printf_i+0x1e8>
 8003440:	6833      	ldr	r3, [r6, #0]
 8003442:	6820      	ldr	r0, [r4, #0]
 8003444:	1d19      	adds	r1, r3, #4
 8003446:	6031      	str	r1, [r6, #0]
 8003448:	0606      	lsls	r6, r0, #24
 800344a:	d501      	bpl.n	8003450 <_printf_i+0xbc>
 800344c:	681d      	ldr	r5, [r3, #0]
 800344e:	e003      	b.n	8003458 <_printf_i+0xc4>
 8003450:	0645      	lsls	r5, r0, #25
 8003452:	d5fb      	bpl.n	800344c <_printf_i+0xb8>
 8003454:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003458:	2d00      	cmp	r5, #0
 800345a:	da03      	bge.n	8003464 <_printf_i+0xd0>
 800345c:	232d      	movs	r3, #45	@ 0x2d
 800345e:	426d      	negs	r5, r5
 8003460:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003464:	4859      	ldr	r0, [pc, #356]	@ (80035cc <_printf_i+0x238>)
 8003466:	230a      	movs	r3, #10
 8003468:	e011      	b.n	800348e <_printf_i+0xfa>
 800346a:	6821      	ldr	r1, [r4, #0]
 800346c:	6833      	ldr	r3, [r6, #0]
 800346e:	0608      	lsls	r0, r1, #24
 8003470:	f853 5b04 	ldr.w	r5, [r3], #4
 8003474:	d402      	bmi.n	800347c <_printf_i+0xe8>
 8003476:	0649      	lsls	r1, r1, #25
 8003478:	bf48      	it	mi
 800347a:	b2ad      	uxthmi	r5, r5
 800347c:	2f6f      	cmp	r7, #111	@ 0x6f
 800347e:	4853      	ldr	r0, [pc, #332]	@ (80035cc <_printf_i+0x238>)
 8003480:	6033      	str	r3, [r6, #0]
 8003482:	bf14      	ite	ne
 8003484:	230a      	movne	r3, #10
 8003486:	2308      	moveq	r3, #8
 8003488:	2100      	movs	r1, #0
 800348a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800348e:	6866      	ldr	r6, [r4, #4]
 8003490:	60a6      	str	r6, [r4, #8]
 8003492:	2e00      	cmp	r6, #0
 8003494:	bfa2      	ittt	ge
 8003496:	6821      	ldrge	r1, [r4, #0]
 8003498:	f021 0104 	bicge.w	r1, r1, #4
 800349c:	6021      	strge	r1, [r4, #0]
 800349e:	b90d      	cbnz	r5, 80034a4 <_printf_i+0x110>
 80034a0:	2e00      	cmp	r6, #0
 80034a2:	d04b      	beq.n	800353c <_printf_i+0x1a8>
 80034a4:	4616      	mov	r6, r2
 80034a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80034aa:	fb03 5711 	mls	r7, r3, r1, r5
 80034ae:	5dc7      	ldrb	r7, [r0, r7]
 80034b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034b4:	462f      	mov	r7, r5
 80034b6:	42bb      	cmp	r3, r7
 80034b8:	460d      	mov	r5, r1
 80034ba:	d9f4      	bls.n	80034a6 <_printf_i+0x112>
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d10b      	bne.n	80034d8 <_printf_i+0x144>
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	07df      	lsls	r7, r3, #31
 80034c4:	d508      	bpl.n	80034d8 <_printf_i+0x144>
 80034c6:	6923      	ldr	r3, [r4, #16]
 80034c8:	6861      	ldr	r1, [r4, #4]
 80034ca:	4299      	cmp	r1, r3
 80034cc:	bfde      	ittt	le
 80034ce:	2330      	movle	r3, #48	@ 0x30
 80034d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80034d4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80034d8:	1b92      	subs	r2, r2, r6
 80034da:	6122      	str	r2, [r4, #16]
 80034dc:	f8cd a000 	str.w	sl, [sp]
 80034e0:	464b      	mov	r3, r9
 80034e2:	aa03      	add	r2, sp, #12
 80034e4:	4621      	mov	r1, r4
 80034e6:	4640      	mov	r0, r8
 80034e8:	f7ff fee6 	bl	80032b8 <_printf_common>
 80034ec:	3001      	adds	r0, #1
 80034ee:	d14a      	bne.n	8003586 <_printf_i+0x1f2>
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034f4:	b004      	add	sp, #16
 80034f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	f043 0320 	orr.w	r3, r3, #32
 8003500:	6023      	str	r3, [r4, #0]
 8003502:	4833      	ldr	r0, [pc, #204]	@ (80035d0 <_printf_i+0x23c>)
 8003504:	2778      	movs	r7, #120	@ 0x78
 8003506:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	6831      	ldr	r1, [r6, #0]
 800350e:	061f      	lsls	r7, r3, #24
 8003510:	f851 5b04 	ldr.w	r5, [r1], #4
 8003514:	d402      	bmi.n	800351c <_printf_i+0x188>
 8003516:	065f      	lsls	r7, r3, #25
 8003518:	bf48      	it	mi
 800351a:	b2ad      	uxthmi	r5, r5
 800351c:	6031      	str	r1, [r6, #0]
 800351e:	07d9      	lsls	r1, r3, #31
 8003520:	bf44      	itt	mi
 8003522:	f043 0320 	orrmi.w	r3, r3, #32
 8003526:	6023      	strmi	r3, [r4, #0]
 8003528:	b11d      	cbz	r5, 8003532 <_printf_i+0x19e>
 800352a:	2310      	movs	r3, #16
 800352c:	e7ac      	b.n	8003488 <_printf_i+0xf4>
 800352e:	4827      	ldr	r0, [pc, #156]	@ (80035cc <_printf_i+0x238>)
 8003530:	e7e9      	b.n	8003506 <_printf_i+0x172>
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	f023 0320 	bic.w	r3, r3, #32
 8003538:	6023      	str	r3, [r4, #0]
 800353a:	e7f6      	b.n	800352a <_printf_i+0x196>
 800353c:	4616      	mov	r6, r2
 800353e:	e7bd      	b.n	80034bc <_printf_i+0x128>
 8003540:	6833      	ldr	r3, [r6, #0]
 8003542:	6825      	ldr	r5, [r4, #0]
 8003544:	6961      	ldr	r1, [r4, #20]
 8003546:	1d18      	adds	r0, r3, #4
 8003548:	6030      	str	r0, [r6, #0]
 800354a:	062e      	lsls	r6, r5, #24
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	d501      	bpl.n	8003554 <_printf_i+0x1c0>
 8003550:	6019      	str	r1, [r3, #0]
 8003552:	e002      	b.n	800355a <_printf_i+0x1c6>
 8003554:	0668      	lsls	r0, r5, #25
 8003556:	d5fb      	bpl.n	8003550 <_printf_i+0x1bc>
 8003558:	8019      	strh	r1, [r3, #0]
 800355a:	2300      	movs	r3, #0
 800355c:	6123      	str	r3, [r4, #16]
 800355e:	4616      	mov	r6, r2
 8003560:	e7bc      	b.n	80034dc <_printf_i+0x148>
 8003562:	6833      	ldr	r3, [r6, #0]
 8003564:	1d1a      	adds	r2, r3, #4
 8003566:	6032      	str	r2, [r6, #0]
 8003568:	681e      	ldr	r6, [r3, #0]
 800356a:	6862      	ldr	r2, [r4, #4]
 800356c:	2100      	movs	r1, #0
 800356e:	4630      	mov	r0, r6
 8003570:	f7fc fe2e 	bl	80001d0 <memchr>
 8003574:	b108      	cbz	r0, 800357a <_printf_i+0x1e6>
 8003576:	1b80      	subs	r0, r0, r6
 8003578:	6060      	str	r0, [r4, #4]
 800357a:	6863      	ldr	r3, [r4, #4]
 800357c:	6123      	str	r3, [r4, #16]
 800357e:	2300      	movs	r3, #0
 8003580:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003584:	e7aa      	b.n	80034dc <_printf_i+0x148>
 8003586:	6923      	ldr	r3, [r4, #16]
 8003588:	4632      	mov	r2, r6
 800358a:	4649      	mov	r1, r9
 800358c:	4640      	mov	r0, r8
 800358e:	47d0      	blx	sl
 8003590:	3001      	adds	r0, #1
 8003592:	d0ad      	beq.n	80034f0 <_printf_i+0x15c>
 8003594:	6823      	ldr	r3, [r4, #0]
 8003596:	079b      	lsls	r3, r3, #30
 8003598:	d413      	bmi.n	80035c2 <_printf_i+0x22e>
 800359a:	68e0      	ldr	r0, [r4, #12]
 800359c:	9b03      	ldr	r3, [sp, #12]
 800359e:	4298      	cmp	r0, r3
 80035a0:	bfb8      	it	lt
 80035a2:	4618      	movlt	r0, r3
 80035a4:	e7a6      	b.n	80034f4 <_printf_i+0x160>
 80035a6:	2301      	movs	r3, #1
 80035a8:	4632      	mov	r2, r6
 80035aa:	4649      	mov	r1, r9
 80035ac:	4640      	mov	r0, r8
 80035ae:	47d0      	blx	sl
 80035b0:	3001      	adds	r0, #1
 80035b2:	d09d      	beq.n	80034f0 <_printf_i+0x15c>
 80035b4:	3501      	adds	r5, #1
 80035b6:	68e3      	ldr	r3, [r4, #12]
 80035b8:	9903      	ldr	r1, [sp, #12]
 80035ba:	1a5b      	subs	r3, r3, r1
 80035bc:	42ab      	cmp	r3, r5
 80035be:	dcf2      	bgt.n	80035a6 <_printf_i+0x212>
 80035c0:	e7eb      	b.n	800359a <_printf_i+0x206>
 80035c2:	2500      	movs	r5, #0
 80035c4:	f104 0619 	add.w	r6, r4, #25
 80035c8:	e7f5      	b.n	80035b6 <_printf_i+0x222>
 80035ca:	bf00      	nop
 80035cc:	080036fd 	.word	0x080036fd
 80035d0:	0800370e 	.word	0x0800370e

080035d4 <memmove>:
 80035d4:	4288      	cmp	r0, r1
 80035d6:	b510      	push	{r4, lr}
 80035d8:	eb01 0402 	add.w	r4, r1, r2
 80035dc:	d902      	bls.n	80035e4 <memmove+0x10>
 80035de:	4284      	cmp	r4, r0
 80035e0:	4623      	mov	r3, r4
 80035e2:	d807      	bhi.n	80035f4 <memmove+0x20>
 80035e4:	1e43      	subs	r3, r0, #1
 80035e6:	42a1      	cmp	r1, r4
 80035e8:	d008      	beq.n	80035fc <memmove+0x28>
 80035ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80035f2:	e7f8      	b.n	80035e6 <memmove+0x12>
 80035f4:	4402      	add	r2, r0
 80035f6:	4601      	mov	r1, r0
 80035f8:	428a      	cmp	r2, r1
 80035fa:	d100      	bne.n	80035fe <memmove+0x2a>
 80035fc:	bd10      	pop	{r4, pc}
 80035fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003606:	e7f7      	b.n	80035f8 <memmove+0x24>

08003608 <_sbrk_r>:
 8003608:	b538      	push	{r3, r4, r5, lr}
 800360a:	4d06      	ldr	r5, [pc, #24]	@ (8003624 <_sbrk_r+0x1c>)
 800360c:	2300      	movs	r3, #0
 800360e:	4604      	mov	r4, r0
 8003610:	4608      	mov	r0, r1
 8003612:	602b      	str	r3, [r5, #0]
 8003614:	f7fd fae6 	bl	8000be4 <_sbrk>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d102      	bne.n	8003622 <_sbrk_r+0x1a>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	b103      	cbz	r3, 8003622 <_sbrk_r+0x1a>
 8003620:	6023      	str	r3, [r4, #0]
 8003622:	bd38      	pop	{r3, r4, r5, pc}
 8003624:	2000026c 	.word	0x2000026c

08003628 <memcpy>:
 8003628:	440a      	add	r2, r1
 800362a:	4291      	cmp	r1, r2
 800362c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003630:	d100      	bne.n	8003634 <memcpy+0xc>
 8003632:	4770      	bx	lr
 8003634:	b510      	push	{r4, lr}
 8003636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800363a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800363e:	4291      	cmp	r1, r2
 8003640:	d1f9      	bne.n	8003636 <memcpy+0xe>
 8003642:	bd10      	pop	{r4, pc}

08003644 <_realloc_r>:
 8003644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003648:	4680      	mov	r8, r0
 800364a:	4615      	mov	r5, r2
 800364c:	460c      	mov	r4, r1
 800364e:	b921      	cbnz	r1, 800365a <_realloc_r+0x16>
 8003650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003654:	4611      	mov	r1, r2
 8003656:	f7ff bc4b 	b.w	8002ef0 <_malloc_r>
 800365a:	b92a      	cbnz	r2, 8003668 <_realloc_r+0x24>
 800365c:	f7ff fbdc 	bl	8002e18 <_free_r>
 8003660:	2400      	movs	r4, #0
 8003662:	4620      	mov	r0, r4
 8003664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003668:	f000 f81a 	bl	80036a0 <_malloc_usable_size_r>
 800366c:	4285      	cmp	r5, r0
 800366e:	4606      	mov	r6, r0
 8003670:	d802      	bhi.n	8003678 <_realloc_r+0x34>
 8003672:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003676:	d8f4      	bhi.n	8003662 <_realloc_r+0x1e>
 8003678:	4629      	mov	r1, r5
 800367a:	4640      	mov	r0, r8
 800367c:	f7ff fc38 	bl	8002ef0 <_malloc_r>
 8003680:	4607      	mov	r7, r0
 8003682:	2800      	cmp	r0, #0
 8003684:	d0ec      	beq.n	8003660 <_realloc_r+0x1c>
 8003686:	42b5      	cmp	r5, r6
 8003688:	462a      	mov	r2, r5
 800368a:	4621      	mov	r1, r4
 800368c:	bf28      	it	cs
 800368e:	4632      	movcs	r2, r6
 8003690:	f7ff ffca 	bl	8003628 <memcpy>
 8003694:	4621      	mov	r1, r4
 8003696:	4640      	mov	r0, r8
 8003698:	f7ff fbbe 	bl	8002e18 <_free_r>
 800369c:	463c      	mov	r4, r7
 800369e:	e7e0      	b.n	8003662 <_realloc_r+0x1e>

080036a0 <_malloc_usable_size_r>:
 80036a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036a4:	1f18      	subs	r0, r3, #4
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	bfbc      	itt	lt
 80036aa:	580b      	ldrlt	r3, [r1, r0]
 80036ac:	18c0      	addlt	r0, r0, r3
 80036ae:	4770      	bx	lr

080036b0 <_init>:
 80036b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036b2:	bf00      	nop
 80036b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036b6:	bc08      	pop	{r3}
 80036b8:	469e      	mov	lr, r3
 80036ba:	4770      	bx	lr

080036bc <_fini>:
 80036bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036be:	bf00      	nop
 80036c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036c2:	bc08      	pop	{r3}
 80036c4:	469e      	mov	lr, r3
 80036c6:	4770      	bx	lr
